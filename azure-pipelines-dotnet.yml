# New variable(s):
# * publishPipelineArtifact : boolean. True to publish to the pipeline (not to the NuGet feed). WARNING - setting this to true means the artefact will be publicly visible in the pipeline results.


# Only run this pipeline for changes in the dotnet code

trigger:
  branches:
    include:
    - master
    - branch-*

  paths:
    include:
    - sonar-secrets-dotnet
  
pr:
  paths:
    include:
    - sonar-secrets-dotnet

pool:
  vmImage: 'windows-latest'

variables:
  - group: sonarsource-build-variables
  - name: buildConfiguration
    value: 'Release'
  - name: slnPath
    value: 'sonar-secrets-dotnet/SonarLint.Secrets.DotNet.sln'
  - name: additionalMSBuildProperties
    value: ''
  - name: nugetFeed
    value: '399fb241-ecc7-4802-8697-dcdd01fbb832/423b576f-2263-43a1-93bd-69f4def19102'
    # only sign if (1) forceSign is true OR (2) is master OR (3) is branch-*
  - name: signArtefacts
    value: $[ or (eq(variables['forceSign'], 'true') , or(eq(variables['Build.SourceBranch'], 'refs/heads/master'), startsWith(variables['Build.SourceBranch'], 'refs/heads/branch-'))) ]

steps:

- task: DownloadSecureFile@1
  displayName: 'Download snk file'
  name: snk
  inputs:
    secureFile: SonarSourceSecret.snk

- powershell: |
    # Calculate the file path
    $versionFilePath = "$env:BUILD_SOURCESDIRECTORY\sonar-secrets-dotnet\src\SonarLint.Secrets.DotNet\SonarLint.Secrets.DotNet.csproj"
    Write-Host "Reading the Sonar project version from '${versionFilePath}' ..."
    # Read the version from the file
    [xml]$versionProps = Get-Content "$versionFilePath"
    $sonarProjectVersion = $versionProps.Project.PropertyGroup.Version
    Write-Host "Sonar project version is '${sonarProjectVersion}'"
    # Set the variable to it can be used by other tasks
    Write-Host "##vso[task.setvariable variable=SONAR_PROJECT_VERSION]$sonarProjectVersion"
  displayName: 'Calculate Sonar project version'

- powershell: |
    $searchRoot = ${env:ProgramFiles(x86)} + '\Windows Kits\10\bin\10*'
    $exeName = 'signtool.exe'
    $signtool = Get-ChildItem -Path $searchRoot -Filter $exeName -Recurse -ErrorAction SilentlyContinue -Force | Select -Last 1

    if (!$signtool){
      throw 'Unable to find ' + $exeName + ' under ' + $searchRoot
    }
    Write-Host 'Sign tool location ' + $signtool.FullName
    Write-Host "##vso[task.setvariable variable=SIGNTOOL_PATH;]$signtool"
  displayName: 'Locate signing tool'
  condition: and(succeeded(), eq(variables.signArtefacts, 'true'))

- task: DownloadSecureFile@1
  displayName: 'Download pfx'
  name: pfx
  inputs:
    secureFile: 'SonarSource-2021-2023.pfx'
  condition: and(succeeded(), eq(variables.signArtefacts, 'true'))

- task: NuGetCommand@2
  displayName: 'Restore NuGet packages'
  inputs:
    command: 'restore'
    restoreSolution: '$(slnPath)'
    restoreArguments: '--locked-mode'
    feedsToUse: 'select'
    vstsFeed: $(nugetFeed)
    includeNuGetOrg: false

- task: SonarQubePrepare@4
  inputs:
    SonarQube: 'Next'
    scannerMode: 'MSBuild'
    projectKey: 'sonar-secrets-dotnet'
    projectVersion: $(SONAR_PROJECT_VERSION)
  
- task: VSBuild@1
  displayName: 'Build solution'
  inputs:
    solution: $(slnPath)
    platform: 'Any CPU'
    configuration: '$(buildConfiguration)'
    msbuildArgs: '-p:SignAssembly=$(signArtefacts) -p:AssemblyOriginatorKeyFile="$(snk.secureFilePath)" /p:CommitId=$(Build.SourceVersion) /p:BranchName=$(Build.SourceBranchName) /p:BuildNumber=$(Build.BuildId) $(additionalMSBuildProperties) '


- task: VSTest@2
  displayName: 'Run .NET unit tests'
  inputs:
     testAssemblyVer2: |
        **\$(BuildConfiguration)\**\*.UnitTests.dll
        !**\obj\**
     runInParallel: true
     runTestsInIsolation: true
     codeCoverageEnabled: true
     platform: '$(buildPlatform)'
     configuration: '$(buildConfiguration)'
     rerunFailedTests: false

- task: SonarQubeAnalyze@4


### .NET Reactor installation start ###

# NOTE: .NET Reactor only requires an installation step.
# Licensing: the license is provided as secure file dropped in the same folder as the exe,
#  with the environment variable DOTNETREACTORROOT set to point to the folder.
# Execution: handled by the MSBuild targets.
# Cleanup: none required

# See the ReadMe in the \build folder for information on how we install and run the obfuscation tool,
# and on how to update it to a newer version.

- task: DownloadSecureFile@1
  displayName: 'Download license'
  name: obfuscLicense
  inputs:
    secureFile: 'license.v3lic'

- task: UniversalPackages@0
  displayName: 'Download .NET Reactor package'
  inputs:
    command: download
    vstsFeed: 'DotNetTeam Project/slvs_obfusc_proto'
    vstsFeedPackage: 'dotnetreactor'
    vstsPackageVersion: '6.8.0'
    downloadDirectory: '$(Agent.TempDirectory)'

### .NET Reactor installation end ###

- task: DotNetCoreCLI@2
  displayName: 'Build NuGet package and publish to local test feed'
  env:
    DOTNETREACTORROOT: '$(Agent.TempDirectory)'
    SIGNTOOL_PATH: $(SIGNTOOL_PATH)
    PFX_PASSWORD: $(pfxPassword2021-2023)
    PFX_PATH: $(pfx.secureFilePath)
    PFX_SHA1: $(pfxSha1-2021-2023)

  inputs:
    command: 'pack'
    packagesToPack: 'sonar-secrets-dotnet/src/SonarLint.Secrets.DotNet/SonarLint.Secrets.DotNet.csproj'
    nobuild: true
    configurationToPack: '$(buildConfiguration)'
    buildProperties: 'SignAssembly=$(signArtefacts);AssemblyOriginatorKeyFile="$(snk.secureFilePath)";OBFUSCATOR_EXE_PATH=$(Agent.TempDirectory)\dotNET_Reactor.Console.exe'
    packDestination: '$(Build.ArtifactStagingDirectory)'

- task: DotNetCoreCLI@2
  displayName: 'Build and run post-build integration tests'
  inputs:
    command: 'test'
    projects: 'sonar-secrets-dotnet/src/IntegrationTests/IntegrationTests.sln'
    arguments: '-c $(BuildConfiguration) -p:SignAssembly=$(signArtefacts)'

- task: PublishPipelineArtifact@1
  condition: eq(variables.publishPipelineArtifact, 'true')
  displayName: 'Publish the NuGet package as a pipeline artifact'
  inputs:
    path: '$(Build.ArtifactStagingDirectory)'
    artifact: DotNetNuGet
    
#- task: NuGetAuthenticate@0
#  displayName: 'NuGet authenticate'

#- task: NuGetCommand@2
#  displayName: 'Nuget push'
#  inputs:
#    command: 'push'
#    publishVstsFeed: $(nugetFeed)
#    allowPackageConflicts: true
