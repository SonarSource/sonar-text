<Project Sdk="Microsoft.NET.Sdk">

  <PropertyGroup>
    <TargetFramework>net472</TargetFramework>
    <ProjectGuid>{4bc8fd67-403a-4385-ad12-25546b131e56}</ProjectGuid>
    <RootNamespace>SonarLint.Secrets.DotNet</RootNamespace>
    <AssemblyName>SonarLint.Secrets.DotNet</AssemblyName>
    <Copyright>Copyright © SonarSource SA 2021-2023</Copyright>
    <Author>SonarSource</Author>
    <Description>SonarSource</Description>
    <PackageLicenseFile>LICENSE.txt</PackageLicenseFile>
    <PackageRequireLicenseAcceptance>true</PackageRequireLicenseAcceptance>
  </PropertyGroup>

  <PropertyGroup Label="Versioning - don't edit these values; edit the value in Directory.Build.props instead">
    <!-- The build number and commit id are set by the CI pipeline. -->
    <BuildNumber>0</BuildNumber>
    <BranchName>not-set</BranchName>
    <CommitId>not-set</CommitId>
    <AssemblyVersion>$(Version).$(BuildNumber)</AssemblyVersion>
    <FileVersion>$(Version).$(BuildNumber)</FileVersion>
    <InformationalVersion>$(Version).$(BuildNumber) Branch: $(BranchName) CommitId: $(CommitId) Configuration: $(Configuration)</InformationalVersion>
  </PropertyGroup>

  <ItemGroup>
    <None Include="..\..\..\LICENSE.txt" Pack="true" PackagePath="" />
  </ItemGroup>

  <ItemGroup Label="Framework references">
    <Reference Include="System.ComponentModel.Composition" />
  </ItemGroup>


  <!-- ************************************************************ -->
  <!-- NuGet package updating -->
  <!-- ************************************************************ -->

  <!-- This target is not executed as part of a normal build; it is only executed when packing i.e. creating the NuGet package.

       The integration tests reference the NuGet package rather than this project (so they test the built package).
       We want to make sure the tests pick up the latest local version of the package when testing, so this target
       does the following:
       * copies the new version of the package to the local package feed used by the integration tests, and
       * removes any secrets packages from under the user-level .nuget\packages directory.
  -->
  <Target Name="UpdatePackageFeeds" AfterTargets="Pack">

    <!-- NuGetPackOutput is defined in the MS "NuGet.Build.Tasks.Pack.targets" and contains the output files
         created by the GenerateNuspec/Pack targets. -->
    <Message Importance="high" Text="[XXX] Copying built package to local test feed: Destination: $(LocalTestFeedPath), Files: @(NuGetPackOutput)" />
    <Copy SourceFiles="@(NuGetPackOutput)" DestinationFolder="$(LocalTestFeedPath)" />

    <PropertyGroup>
      <InstalledSecretsPackageDirectory>$(NuGetPackageRoot)sonarlint.secrets.dotnet</InstalledSecretsPackageDirectory>
    </PropertyGroup>
    <Message Importance="high" Text="[XXX] Removing package from NuGetPackageRoot: $(InstalledSecretsPackageDirectory)" />
    <RemoveDir Directories="$(InstalledSecretsPackageDirectory)" ContinueOnError="false" />

    <Error Condition="Exists('$(InstalledSecretsPackageDirectory)')" Text="Failed to remove the installed secrets NuGet package directory: $(InstalledSecretsPackageDirectory)" />
  </Target>

  <Target Name="SignDlls" Condition="'$(SignAssembly)' == 'true'" AfterTargets="Build">

    <Error Condition=" $(PFX_PATH) == '' " Text="PFX_PATH has not been set" />
    <Error Condition=" $(PFX_PASSWORD) == '' " Text="PFX_PASSWORD has not been set" />
    <Error Condition=" $(PFX_SHA1) == '' " Text="PFX_SHA1 has not been set" />
    <Error Condition=" !Exists($(PFX_PATH)) " Text="The specified pfx file does not exist: $(PFX_PATH)" />
    <Error Condition=" $(SIGNTOOL_PATH) == '' " Text="The location of the signtool.exe has not been set ('SIGNTOOL_PATH')" />
    <Error Condition=" !Exists($(SIGNTOOL_PATH)) " Text="Signing tool exe does not exist at the specified location: $(SIGNTOOL_PATH)" />

    <PropertyGroup>
      <SignedAssemblyName>$([System.IO.Path]::GetFileName($(TargetPath)))</SignedAssemblyName>
      <SigningWorkingDir>$([System.IO.Path]::GetDirectoryName($(TargetPath)))</SigningWorkingDir>
    </PropertyGroup>

    <Message Importance="high" Text="Signing the DLLs" />

    <Exec WorkingDirectory="$(SigningWorkingDir)" Command="&quot;$(SIGNTOOL_PATH)&quot; sign /fd SHA256 /sha1 $(PFX_SHA1) /f &quot;$(PFX_PATH)&quot; /p $(PFX_PASSWORD) /tr http://sha256timestamp.ws.symantec.com/sha256/timestamp /td SHA256 $(SignedAssemblyName)" />
  </Target>

</Project>