<Project>
	<!-- 
    ***********************
    Overview
    ***********************

    We only sign CI builds in master / branch-*. We don't sign PR builds or local dev builds.
    
    Order of operations on CI machine
    *********************************
    1. Build + strong-name
    2. Unit test
    3. Obfuscate + re-strong-name
    4. Authenticode-sign
    5. [TODO] Smoke-tests on signed and obfuscated binary
    
    Notes:
    * we need to reapply the strong-name as part of the obfuscation (otherwise the obfuscation tool throws)
    * we need to Authenticode-sign the assembly after it has been obfuscated, since obfuscation changes the content of the assembly.
    * we could sign and obfuscate before we run the unit tests, but it would make understanding test failures on the CI
      more difficult.
    * the obfuscation tool is capable of signing the assembly, but we prefer to do it ourselves so we don't need to
      share the PFX and password.
  
    Obfuscation
    ***********
    We use .NET Reactor (https://www.eziriz.com/help/command_line_parameters/) to obfuscate the assembly.
    We have a corporate license so we can install it on dev machines if required (e.g. to view
    de-obfuscated stack traces or to do manual testing of different obfuscation options).
   
  -->

	<Target Name="ProtectDll" Condition="$(SignAssembly) == 'true' AND $(IsPackable) == 'true' " BeforeTargets="GenerateNuSpec" DependsOnTargets="SetSigningProperties;Obfuscate;AuthenticodeSignDlls" >
    <!-- This target controls:
         * the conditions for execution (Condition="...")
         * where in the build sequence the work is done (BeforeTargets="...")
         * the order in which the operations are performed (DependsOnTarget="...")
    
         All of the actual work is performed by the depended-on targets.
    -->
	</Target>

	<Target Name="SetSigningProperties">
		<!-- MSBuild note: properties set in a target aren't visible to other targets until
	       until the setting target has finished executing.
		   So, to make sure the properties are visible we're setting them in this separate
		   target that does nothing else.-->
		<PropertyGroup>
			<DllToProtect>$(TargetPath)</DllToProtect>
		</PropertyGroup>
	</Target>

	<Target Name="Obfuscate">
		<Message Importance="high" Text="[XXX] Obfuscating dll: $(DllToProtect)" />

		<Error Condition=" $(AssemblyOriginatorKeyFile) == '' " Text="AssemblyOriginatorKeyFile has not been set" />
		<Error Condition=" !Exists($(AssemblyOriginatorKeyFile)) " Text="The specified key file does not exist: $(AssemblyOriginatorKeyFile)" />
		<Error Condition=" $(OBFUSCATOR_EXE_PATH) == '' " Text="OBFUSCATOR_EXE_PATH has not been set" />
		<Error Condition=" !Exists($(OBFUSCATOR_EXE_PATH)) " Text="The specified obfuscation exe does not exist: $(OBFUSCATOR_EXE_PATH)" />

		<Exec Command='"$(OBFUSCATOR_EXE_PATH)" -licensed -project "$(MSBuildThisFileDirectory)config.nrproj" -file "$(DllToProtect)" -targetfile "$(DllToProtect)" -snkeypair "$(AssemblyOriginatorKeyFile)" ' />

	</Target>

	<Target Name="AuthenticodeSignDlls">
		<Message Importance="high" Text="[XXX] Authenticode-signing assembly: $(DllToProtect)" />

		<Error Condition=" $(PFX_PATH) == '' " Text="PFX_PATH has not been set" />
		<Error Condition=" $(PFX_PASSWORD) == '' " Text="PFX_PASSWORD has not been set" />
		<Error Condition=" $(PFX_SHA1) == '' " Text="PFX_SHA1 has not been set" />
		<Error Condition=" !Exists($(PFX_PATH)) " Text="The specified pfx file does not exist: $(PFX_PATH)" />
		<Error Condition=" $(SIGNTOOL_PATH) == '' " Text="The location of the signtool.exe has not been set ('SIGNTOOL_PATH')" />
		<Error Condition=" !Exists($(SIGNTOOL_PATH)) " Text="Signing tool exe does not exist at the specified location: $(SIGNTOOL_PATH)" />

		<PropertyGroup>
			<SignedAssemblyName>$([System.IO.Path]::GetFileName($(DllToProtect)))</SignedAssemblyName>
			<SigningWorkingDir>$([System.IO.Path]::GetDirectoryName($(DllToProtect)))</SigningWorkingDir>
		</PropertyGroup>

		<Exec WorkingDirectory="$(SigningWorkingDir)" Command="&quot;$(SIGNTOOL_PATH)&quot; sign /fd SHA256 /sha1 $(PFX_SHA1) /f &quot;$(PFX_PATH)&quot; /p $(PFX_PASSWORD) /tr http://sha256timestamp.ws.symantec.com/sha256/timestamp /td SHA256 &quot;$(SignedAssemblyName)&quot;" />

	</Target>

</Project>