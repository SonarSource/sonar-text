env:
  CIRRUS_VAULT_URL: https://vault.sonar.build:8200
  CIRRUS_VAULT_AUTH_PATH: jwt-cirrusci
  CIRRUS_VAULT_ROLE: cirrusci-${CIRRUS_REPO_OWNER}-${CIRRUS_REPO_NAME}

  ARTIFACTORY_URL: VAULT[development/kv/data/repox data.url]
  ARTIFACTORY_PRIVATE_USERNAME: vault-${CIRRUS_REPO_OWNER}-${CIRRUS_REPO_NAME}-private-reader
  ARTIFACTORY_PRIVATE_PASSWORD: VAULT[development/artifactory/token/${CIRRUS_REPO_OWNER}-${CIRRUS_REPO_NAME}-private-reader access_token]
  ARTIFACTORY_DEPLOY_USERNAME: vault-${CIRRUS_REPO_OWNER}-${CIRRUS_REPO_NAME}-qa-deployer
  ARTIFACTORY_DEPLOY_PASSWORD: VAULT[development/artifactory/token/${CIRRUS_REPO_OWNER}-${CIRRUS_REPO_NAME}-qa-deployer access_token]
  #Possible values for ARTIFACTORY_DEPLOY_REPO: sonarsource-private-qa, sonarsource-public-qa
  ARTIFACTORY_DEPLOY_REPO: sonarsource-public-qa
  ARTIFACTORY_ACCESS_TOKEN: VAULT[development/artifactory/token/${CIRRUS_REPO_OWNER}-${CIRRUS_REPO_NAME}-private-reader access_token]
  ARTIFACTORY_PROMOTE_TOKEN: VAULT[development/artifactory/token/${CIRRUS_REPO_OWNER}-${CIRRUS_REPO_NAME}-promoter access_token]
  # burgr notification
  BURGR_URL: VAULT[development/kv/data/burgr data.url]
  BURGR_USERNAME: VAULT[development/kv/data/burgr data.cirrus_username]
  BURGR_PASSWORD: VAULT[development/kv/data/burgr data.cirrus_password]
  # Use bash (instead of sh on linux or cmd.exe on windows)
  CIRRUS_SHELL: bash
  # Allows to run builds for the 50 last commits in a branch:
  CIRRUS_CLONE_DEPTH: 0
  # analysis on next
  SONAR_TOKEN: VAULT[development/kv/data/next data.token]
  SONAR_HOST_URL: https://next.sonarqube.com/sonarqube

  ORG_GRADLE_PROJECT_signingKey: VAULT[development/kv/data/sign data.key]
  ORG_GRADLE_PROJECT_signingPassword: VAULT[development/kv/data/sign data.passphrase]
  ORG_GRADLE_PROJECT_signingKeyId: 0x7DCD4258
  GRADLE_USER_HOME: ${CIRRUS_WORKING_DIR}/.gradle
  GRADLE_COMMON_FLAGS: --console plain --no-daemon

win_vm_definition: &WINDOWS_VM_DEFINITION
  ec2_instance:
    experimental: true # see https://github.com/cirruslabs/cirrus-ci-docs/issues/1051
    image: base-windows-dotnet-v*
    region: eu-central-1
    subnet_id: ${CIRRUS_AWS_SUBNET}
    type: t2.medium # see https://aws.amazon.com/ec2/instance-types/
    platform: windows

linux_image_template: &LINUX_IMAGE
  image: ${CIRRUS_AWS_ACCOUNT}.dkr.ecr.eu-central-1.amazonaws.com/base:j11-latest
  cluster_name: ${CIRRUS_CLUSTER_NAME}
  region: eu-central-1
  namespace: default
  use_in_memory_disk: true

linux_1_cpu_4G_template: &LINUX_1_CPU_4G
  eks_container:
    <<: *LINUX_IMAGE
    cpu: 1
    memory: 4G

linux_2_cpu_6G_java_17_template: &LINUX_2_CPU_6G_JAVA_17
  eks_container:
    <<: *LINUX_IMAGE
    image: ${CIRRUS_AWS_ACCOUNT}.dkr.ecr.eu-central-1.amazonaws.com/base:j17-latest
    cpu: 2
    memory: 6G

only_sonarsource_qa: &ONLY_IF_SONARSOURCE_QA
  only_if: $CIRRUS_USER_COLLABORATOR == 'true' && $CIRRUS_TAG == "" && ($CIRRUS_PR != "" || $CIRRUS_BRANCH == "master" || $CIRRUS_BRANCH =~ "branch-.*" || $CIRRUS_BRANCH =~ "dogfood-on-.*")

qa_task_filter_template: &QA_TASK_FILTER
  depends_on:
    - build
  <<: *ONLY_IF_SONARSOURCE_QA

setup_gradle_cache_template: &SETUP_GRADLE_CACHE
  gradle_cache:
    folder: .gradle/caches
  create_gradle_directory_script:
    - mkdir -p "${CIRRUS_WORKING_DIR}/.gradle"

cleanup_gradle_cache_script_template: &CLEANUP_GRADLE_CACHE_SCRIPT
  cleanup_gradle_script:
    - /usr/bin/find "${CIRRUS_WORKING_DIR}/.gradle/caches/" -name "*.lock" -type f -delete
    - rm -rf "${CIRRUS_WORKING_DIR}/.gradle/caches/8.3/"
    - rm -rf "${CIRRUS_WORKING_DIR}/.gradle/caches/journal-1/"
    - rm -rf "${CIRRUS_WORKING_DIR}/.gradle/caches/build-cache-1/"

build_task:
  <<: *ONLY_IF_SONARSOURCE_QA
  <<: *LINUX_2_CPU_6G_JAVA_17
  env:
    SIGN_KEY: VAULT[development/kv/data/sign data.key]
    PGP_PASSPHRASE: VAULT[development/kv/data/sign data.passphrase]
    #allow deployment of pull request artifacts to repox
    DEPLOY_PULL_REQUEST: true
  <<: *SETUP_GRADLE_CACHE
  build_script:
    - source cirrus-env BUILD
    - regular_gradle_build_deploy_analyze
  <<: *CLEANUP_GRADLE_CACHE_SCRIPT

ws_scan_task:
  depends_on:
    - build
  <<: *LINUX_1_CPU_4G
  # run only on master and long-term branches
  only_if: $CIRRUS_USER_COLLABORATOR == 'true' && $CIRRUS_TAG == "" && ($CIRRUS_BRANCH == "master" || $CIRRUS_BRANCH =~ "branch-.*")
  env:
    WS_APIKEY: VAULT[development/kv/data/mend data.apikey]
  <<: *SETUP_GRADLE_CACHE
  whitesource_script:
    - source cirrus-env QA
    - GRADLE_OPTS="-Xmx64m -Dorg.gradle.jvmargs='-Xmx3G' -Dorg.gradle.daemon=false" ./gradlew ${GRADLE_COMMON_FLAGS} :sonar-text-plugin:processResources -Pkotlin.compiler.execution.strategy=in-process
    - source ./export_ws_variables.sh
    - source ws_scan.sh
  allow_failures: "true"
  always:
    ws_artifacts:
      path: "whitesource/**/*"
  <<: *CLEANUP_GRADLE_CACHE_SCRIPT

qa_plugin_task:
  <<: *QA_TASK_FILTER
  <<: *LINUX_2_CPU_6G_JAVA_17
  env:
    matrix:
    - SQ_VERSION: LATEST_RELEASE
    - SQ_VERSION: DEV
  <<: *SETUP_GRADLE_CACHE
  plugin_script:
    - source cirrus-env QA
    - ./gradlew ${GRADLE_COMMON_FLAGS} -Dsonar.runtimeVersion=${SQ_VERSION} :its:plugin:integrationTest
  <<: *CLEANUP_GRADLE_CACHE_SCRIPT

qa_ruling_task:
  <<: *QA_TASK_FILTER
  <<: *LINUX_2_CPU_6G_JAVA_17
  <<: *SETUP_GRADLE_CACHE
  ruling_script:
    - source cirrus-env QA
    - ./gradlew ${GRADLE_COMMON_FLAGS} -Dsonar.runtimeVersion=LATEST_RELEASE :its:ruling:integrationTest
  <<: *CLEANUP_GRADLE_CACHE_SCRIPT

promote_task:
  depends_on:
    - build
    - build_and_release_dotnet
    - qa_plugin
    - ws_scan
  <<: *ONLY_IF_SONARSOURCE_QA
  <<: *LINUX_1_CPU_4G
  env:
    #promotion cloud function
    GCF_ACCESS_TOKEN: VAULT[development/kv/data/promote data.token]
    PROMOTE_URL: VAULT[development/kv/data/promote data.url]
    GITHUB_TOKEN: VAULT[development/github/token/${CIRRUS_REPO_OWNER}-${CIRRUS_REPO_NAME}-promotion token]
    #artifacts that will have downloadable links in burgr
    ARTIFACTS: org.sonarsource.text:sonar-text-plugin:jar
  <<: *SETUP_GRADLE_CACHE
  script:
    - source cirrus-env PROMOTE
    - curl -sSLf -H "Authorization: Bearer $GCF_ACCESS_TOKEN" "$PROMOTE_URL/$GITHUB_REPO/$GITHUB_BRANCH/$BUILD_NUMBER/$PULL_REQUEST"
    - burgr-notify-promotion

build_and_release_dotnet_task:
  <<: *ONLY_IF_SONARSOURCE_QA
  <<: *WINDOWS_VM_DEFINITION
  env:
    BUILD_CONFIGURATION: "Release"
    PROJECT_DIR: ${CIRRUS_WORKING_DIR}\\sonar-text-dotnet
    PIPELINE_SCRIPTS_DIR: ${PROJECT_DIR}\\pipeline_scripts
    PROJECT_KEY: "sonar-secrets-dotnet"
    PROJECT_NAME: "sonar-text-dotnet"
    SNK_PATH: ${CIRRUS_WORKING_DIR}\\SonarSourceSecret.snk
    ENCODED_SONARSOURCE_SNK: VAULT[development/team/languages/kv/data/strong_named_key data.SonarSourceSecret_snk]
    ENCODED_SONARSOURCE_SNK_PATH: ${CIRRUS_WORKING_DIR}\\Encoded_SonarSourceSecret.snk
    SIGN_PASSPHRASE: VAULT[development/kv/data/sign/dotnet data.passphrase]
    PFX_PATH: ${CIRRUS_WORKING_DIR}\\SonarSource-2021-2023.pfx
    PFX_SHA1: VAULT[development/kv/data/sign/dotnet data.pfx_sha1]
    ENCODED_PFX_CERT: VAULT[development/kv/data/sign/dotnet data.cert_pfx]
    ENCODED_PFX_CERT_PATH: ${CIRRUS_WORKING_DIR}\\Encoded_SonarSource-2021-2023.pfx
    ARTIFACTORY_BUILD_NAME: "sonar-text-dotnet" # artifactory dotnet build name
    WS_APIKEY: VAULT[development/kv/data/mend data.apikey]
    WS_PRODUCTNAME: "SonarSource/sonar-text"
  sign_cert_pfx_file:
    path: ${ENCODED_PFX_CERT_PATH}
    variable_name: ENCODED_PFX_CERT
  sonarSourceSecret_snk_file:
    path: ${ENCODED_SONARSOURCE_SNK_PATH} # this is the base64 encoded file
    variable_name: ENCODED_SONARSOURCE_SNK
  base64_decode_files_script: |
    base64 --decode ${ENCODED_SONARSOURCE_SNK_PATH} > ${SNK_PATH}
    file ${SNK_PATH}
    base64 --decode ${ENCODED_PFX_CERT_PATH} > ${PFX_PATH}
    file ${PFX_PATH}
  analysis_begin_step_script:
    - PowerShell -NonInteractive -NoProfile -File "${PIPELINE_SCRIPTS_DIR}\\analysis_begin_step.ps1"
  build_and_pack_script:
    # Sets the $BUILD_NUMBER; used for setting the project version.
    # See https://github.com/SonarSource/re-ci-images/blob/master/docker/bin/cirrus-env#L28
    - source cirrus-env QA
    - PowerShell -NonInteractive -NoProfile -File "${PIPELINE_SCRIPTS_DIR}\\build_and_pack_solution.ps1"
  execute_tests_script:
    - source cirrus-env QA
    - PowerShell -NonInteractive -NoProfile -File "${PIPELINE_SCRIPTS_DIR}\\execute_tests.ps1"
  analysis_end_step_script:
    - cd $PROJECT_DIR
    - ps: SonarScanner.MSBuild.exe end /d:sonar.login="$env:SONAR_TOKEN"
  execute_mend_scan_script:
    - PowerShell -NonInteractive -NoProfile -File "${PIPELINE_SCRIPTS_DIR}\\mend_scan.ps1"
  promote_script:
    - source cirrus-env QA
    - PowerShell -NonInteractive -NoProfile -File "${PIPELINE_SCRIPTS_DIR}\\promote.ps1"
