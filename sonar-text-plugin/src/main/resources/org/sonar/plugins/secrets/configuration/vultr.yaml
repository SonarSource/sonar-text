provider:
  metadata:
    name: Vultr
    category: Cloud Provider 
    message: Make sure this Vultr personal access token gets revoked, changed, and removed from the code.
  detection:
    pre:
      scopes:
        - main
      include:
        content:
          - vultr
    post:
      # This secret is Type 2, and its pattern is not random enough.
      # A Statistical Filter is mandatory, for FP filtering.
      statisticalFilter:
        threshold: 3.5
      patternNot:
        - "([\\w])\\1{5,}"
        - "(?i)(?:s|ex)ample|foo|bar|test|abcd|redacted|key"
        - "1234"
  rules:
    - rspecKey: S6993
      id: vultr-t2-pat
      metadata:
        name: Vultr Personal Access Token
      detection:
        matching:
          pattern: "\\b([A-Z0-9]{36})\\b"
          context:
            # Hashes can be falsely detected, this patternAround attempts
            # to keep a good balance between FPs and FNs
            # These secrets are either called API Keys or Personal Access Tokens.
            matchEach:
              - patternBefore: 
                  pattern: "(?i)(?:personal.?)?(?:access|api.?)?(?:key|token)"
                  maxLineDistance: 4
              # No trailing \\b is added because the word vultr can be followed
              # by strings.
              - patternAround:
                  pattern: "(?i)\\bvultr"
                  maxLineDistance: 1
      examples:
        - text: |
            # This is text that matches the regex but should not be considered
            # a token
            class SONARTYPETHATISUSEFULFORSOMEREASONSS0
              def do_this()
                print(vultr)
          containsSecret: false
        - text: |
            # Close enough, but not a token either
            class SONARTYPETHATISUSEFULFORSOMEREASONSS0
              def do_this()
                print(vultr)
              def print_key()
                print(key)
          containsSecret: false
        - text: |
            # A random enough string, but too far
            some_random_hash_like_string = "7B97CBFF73796E9FE8EDA7592D55C8F0A5C9/E58EBE82A45B9B1FBA6E08FDC33B481372E9/E7432206BAF0C125F08A59A9CDF1C9BE39D7"

            def some_function()
              do_this()

            class MyClass
              def do_this()
                print(vultr)
              def print_data()
                print(key)
          containsSecret: false
        - text: |
            key = "E58EBE82A45B9B1FBA6E08FDC33B481372E9"
            VultrApp(key)
          containsSecret: true
          match: E58EBE82A45B9B1FBA6E08FDC33B481372E9
        - text: |
            # A random enough string, base64-like
            # Worst-case scenario because the provider name is included in the
            # weird string below but has nothing to do with it
            
            some_random_hash_like_string = "7B97CBFF73796E9FE8EDA7592D55C8F0A5C9/E58EBE82A45B9B1FBA6E08FDC33B481372E9/E7432206BAF0C125F08A59A9CDF1C9BE39D7"
            random_business_name_key = MarkovUltraChain
          containsSecret: false

        - text: |
            # Noncompliant code example
            props.set("vultr-api-key", "7EPOWN4BMA7GXWXJTWTFE3DAZHPW63UIN46H") // Noncompliant
          containsSecret: true
          match: 7EPOWN4BMA7GXWXJTWTFE3DAZHPW63UIN46H
        - text: |
            # Compliant solution
            props.set("vultr-api-key", System.getenv("VULTR_API_KEY"))
          containsSecret: false
        - text: |
            VULTR_API_KEY=TZHBG7WPPEEXD6HF7AW6TN4A43WUM3WIOXNJ
            curl "https://api.vultr.com/v2/account" \
              -X GET \
              -H "Authorization: Bearer ${VULTR_API_KEY}"
          containsSecret: true
          match: TZHBG7WPPEEXD6HF7AW6TN4A43WUM3WIOXNJ

