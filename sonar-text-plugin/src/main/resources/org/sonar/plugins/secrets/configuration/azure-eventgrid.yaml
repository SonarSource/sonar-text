provider:
  metadata:
    name: Azure Event Grid
    category: Cloud Provider
    message: Make sure this EventGrid access key gets revoked, changed, and removed from the code.

  detection:
    pre:
      scopes:
        - main
      include:
        content:
          - "azure"
  rules:
    - rspecKey: S7011
      id: azure-eventgrid-t2-access-keys
      metadata:
        name: Azure EventGrid Access Keys (SAS Keys)
      detection:
        matching:
          pattern: "\\b([-A-Za-z0-9+\\/_%]{43,73}=)\\B"
          context:
            # "aeg-sas-key" can be either an HTTP header
            # or a query parameter.
            matchEach:
              - matchEither:
                - patternAround:
                    pattern: "(?i)\\baeg-sas-key\\b"
                    maxLineDistance: 10
                - patternAround:
                    pattern: "(?i)\\btopic[-_\\.]?key\\b"
                    maxLineDistance: 2
                - patternBefore:
                    pattern: "(?i)BuildSharedAccessSignature"
                    maxLineDistance: 5
                
              # Unless the customer uses custom domains, chances are the
              # default Event Grid domain will be used. Let's use it, in case
              # implementation of equivalent services in other Cloud providers
              # works the same way.
              - patternAround:
                  pattern: "(?i)\\.eventgrid\\.azure\\.net\\b"
                  maxLineDistance: 10
        post:
          statisticalFilter:
            threshold: 4.0
      examples:
        - text: |
            # This one is not meant to be found with this rule,
            # it is meant to be found with S6437
            OffsetDateTime expiration = OffsetDateTime.now().plusMinutes(20);
            String credentialString = EventGridSasCredential
                .createSas(endpoint, expiration, new AzureKeyCredential("vobPdVO3kYZKwbnil2IsmyrR/gTYenN4vAZEGHUfhj8="));
            EventGridSasCredential signature = new EventGridSasCredential(credentialString);
          containsSecret: false
        - text: |
            private const string topicEndpoint = "https://secret-detection-in-event.westeurope-1.eventgrid.azure.net/api/events";
            private const string topicKey      = "vobPdVO3kYZKwbnil2IsmyrR/gTYenN4vAZEGHUfhj8=";

            public static async Task Main(string[] args)
            {
                TopicCredentials topicCredentials = new TopicCredentials(topicKey);
                EventGridClient client = new EventGridClient(topicCredentials);

                List<EventGridEvent> events = new List<EventGridEvent>
                {
                    new EventGridEvent()
                    {
                    ...
          containsSecret: true
          match: "vobPdVO3kYZKwbnil2IsmyrR/gTYenN4vAZEGHUfhj8="
        - text: |
            topic_endpoint = "https://secret-detection-in-event.westeurope-1.eventgrid.azure.net/api/events"

            headers = {
                "aeg-sas-key": "vobPdVO3kYZKwbnil2IsmyrR/gTYenN4vAZEGHUfhj8=",
                "Content-Type": "application/json"
            }

            event_data = [{ ... }]

            response = requests.post(topic_endpoint, headers=headers, data=json.dumps(event_data))
          containsSecret: true
          match: "vobPdVO3kYZKwbnil2IsmyrR/gTYenN4vAZEGHUfhj8="
        - text: |
            #!/bin/bash

            # Replace <topic-name> and <region> with your actual topic name and region
            topic_endpoint="https://<topic-name>.<region>-1.eventgrid.azure.net/api/events"

            access_key="vobPdVO3kYZKwbnil2IsmyrR/gTYenN4vAZEGHUfhj8="

            event_data='[{ ...  }]

            curl -X POST \
                -H "aeg-sas-key: $access_key" \
                -H "Content-Type: application/json" \
                -d "$event_data" \
                $topic_endpoint
          containsSecret: true
          match: "vobPdVO3kYZKwbnil2IsmyrR/gTYenN4vAZEGHUfhj8="

        - text: |
              // This kind of code is susceptible to be used to generate SAS keys.
              public static void Main()
              {
                  Console.WriteLine(BuildSharedAccessSignature(
                      "https://secret-detection-in-event.westeurope-1.eventgrid.azure.net/api/events",
                      new DateTime(1720826990),
                      "vobPdVO3kYZKwbnil2IsmyrR/gTYenN4vAZEGHUfhj8="));
              }

              static string BuildSharedAccessSignature(string resource, DateTime expirationUtc, string key) {
                  const char Resource = 'r';
                  const char Expiration = 'e';
                  const char Signature = 's';
          
                  string encodedResource = HttpUtility.UrlEncode(resource);
                  var culture = CultureInfo.CreateSpecificCulture("en-US");
                  var encodedExpirationUtc = HttpUtility.UrlEncode(expirationUtc.ToString(culture));
          
                  string unsignedSas = $ "{Resource}={encodedResource}&{Expiration}={encodedExpirationUtc}";
                  using (var hmac = new HMACSHA256(Convert.FromBase64String(key)))
                  {
                      string signature = Convert.ToBase64String(hmac.ComputeHash(Encoding.UTF8.GetBytes(unsignedSas)));
                      string encodedSignature = HttpUtility.UrlEncode(signature);
                      string signedSas = $" {unsignedSas}&{Signature}={encodedSignature};
          
                      return signedSas;
                  }
              }
          containsSecret: true
          match: "vobPdVO3kYZKwbnil2IsmyrR/gTYenN4vAZEGHUfhj8="


    - rspecKey: S7011
      id: azure-eventgrid-t2-shared-access-secrets
      metadata:
        name: Azure EventGrid Shared Access Signatures (SAS tokens)
        message: Make sure this EventGrid SAS key gets revoked, changed, and removed from the code.
      detection:
        matching:
          # A SAS key is composed of this:
          # r={encodedResource}&e={encodedExpirationUtc}&s={encodedSignature}
          # and encodedSignature is the HMACSHA246 encryption of the two first strings.
          #
          # SAS provide the same role as access keys, but allows a little more
          # security by adding access granularity and expiration, if they get
          # leaked.
          #
          # Still, we do not want to have them leaking.
          #
          # Real-Life Example, this whole string is the secret:
          # r=https%3a%2f%2fsecret-detection-in-event.westeurope-1.eventgrid.azure.net%2fapi%2fevents&e=1%2f1%2f0001+12%3a02%3a52+AM&s=gdcIr5dXR4dC3sNyK4Qree4XogaRma3YdtH7%2boCxSQo%3d
          # 
          # The detection only focuses on the URL-encoded version, not the
          # URL-decoded because of its low likelihood
          pattern: "(?i)\\b(\
                    r=(?<resource>https%3a%2f%2f[-a-z0-9%._]{1,200}\\.eventgrid\\.azure\\.net%2fapi%2fevents\
                        (?:%3f)?(?:apiVersion%3d\\d{4}-\\d{1,2}-\\d{1,2})?)\
                    &e=(?<expiration>\\d{1,2}%2f\\d{1,2}%2f\\d{4}(?:%20|\\+)\\d{1,2}%3a\\d{1,2}%3a\\d{1,2}(?:%20|\\+)[AP]M)\
                    &s=(?<signature>[-a-z0-9+\\/_%]{30,100}%3d)\
                    )\\b"
          context:
            matchEither:
              # "aeg-sas-key" can be either an HTTP header
              # or a query parameter.
              - patternAround:
                  pattern: "(?i)\\baeg-sas-token\\b"
                  maxLineDistance: 2
              - patternAround:
                  pattern: "(?i)\\bauthorization\\b"
                  maxLineDistance: 2
              - patternAround:
                  pattern: "(?i)\\bSharedAccessSignature\\b"
                  maxLineDistance: 2

              # This one aims to catch potential oversights in code
              - patternAround:
                  pattern: "(?i)\\bgenerateSharedAccessSignature\\b"
                  maxLineDistance: 20
        post:
          statisticalFilter: 
            threshold: 4
          patternNot:
            - "([\\w])\\1{5,}"
      examples:
        - text: |
            aeg-sas-token: r=https%3a%2f%2fmytopic.eventgrid.azure.net%2fapi%2fevents&e=6%2f15%2f2017+6%3a20%3a15+PM&s=XXXXXXXXXXXXX%2fBPjdDLOrc6THPy3tDcGHw1zP4OajQ%3d

            Authorization: SharedAccessSignature r=https%3a%2f%2fmytopic.eventgrid.azure.net%2fapi%2fevents&e=6%2f15%2f2017+6%3a20%3a15+PM&s=XXXXXXXXXXXXX%2fBPjdDLOrc6THPy3tDcGHw1zP4OajQ%3d

          containsSecret: false
        - text: |
            Authorization: SharedAccessSignature r=https%3a%2f%2fsecret-detection-in-event.westeurope-1.eventgrid.azure.net%2fapi%2fevents&e=1%2f1%2f0001+12%3a02%3a52+AM&s=gdcIr5dXR4dC3sNyK4Qree4XogaRma3YdtH7%2boCxSQo%3d
          containsSecret: true
          match: "r=https%3a%2f%2fsecret-detection-in-event.westeurope-1.eventgrid.azure.net%2fapi%2fevents&e=1%2f1%2f0001+12%3a02%3a52+AM&s=gdcIr5dXR4dC3sNyK4Qree4XogaRma3YdtH7%2boCxSQo%3d"
        - text: |
                const sig = await generateSharedAccessSignature(
                  topicUrl,
                  new AzureKeyCredential(key),
                  new Date(Date.UTC(2020, 0, 1, 0, 0, 0)),
                );

                assert.equal(
                  sig,
                  "r=https%3A%2F%2Fsonar-topic.westus-2.eventgrid.azure.net%2Fapi%2Fevents%3FapiVersion%3D2018-01-01&e=1%2F1%2F2020%2012%3A00%3A00%20AM&s=qLCNAAYzNrRMIOyVOgJSKxiJZbJFWrNPvw2Oo4QYXDv%3D",
          containsSecret: true
          match:  "r=https%3A%2F%2Fsonar-topic.westus-2.eventgrid.azure.net%2Fapi%2Fevents%3FapiVersion%3D2018-01-01&e=1%2F1%2F2020%2012%3A00%3A00%20AM&s=qLCNAAYzNrRMIOyVOgJSKxiJZbJFWrNPvw2Oo4QYXDv%3D"

