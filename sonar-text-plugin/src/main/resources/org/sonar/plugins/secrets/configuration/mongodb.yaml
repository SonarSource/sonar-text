provider:  
  metadata:
      name: MongoDB
      category: Database API Standard
      message: Make sure this MongoDB database password gets changed and removed from the code.
  detection:
    pre:
      scopes:
        - main
      include:
        content:
          - mongo
          - mongodb
      reject:
        ext:
          ${common/rejectedExtensions.yaml}
        paths:
          - "**/appsettings.Development.json"
          - "**/appsettings.Local.json"
    post:
      # Avoid matching values found on SourceGraph that look like dummy passwords or insertions.
      patternNot:
        - "(?i)^(db|my)?_?pass(word|wd)?$"
        - "^\\{{2,}"
        - "^<[a-z \\-]+>$"
        - "^--[a-z\\-]+$"
        ${common/patternNot.yaml}

  rules:
    - id: mongo-url
      rspecKey: S6694
      metadata:
        name: MongoDB database passwords should not be disclosed
      detection:
        matching:
          # Look for URIs in the format "protocol://username:password@server:port/..."
          # The protocol is "mongo" or "mongodb" but can also be followed by a subprotocol, e.g. "mongodb+srv".
          # Certain special characters need to be percent-encoded so we can break matching when we find them.
          pattern: >-
            \bmongo(?:db)?(?:\+\w+)?://[\w!$&'()*+,;=\-.~%]++:([^@/\s]++)@
        post:
          patternNot:
            # $db_password, $$db_password
            - "^(\\${1,2}[a-z_]*)?(db|my)?_?pass(word|wd)?"
            # [My Password]
            - "^\\[[\\w\\t \\-]+\\]$"
            # <My Password> or <:My Password:>
            - "<[\\w\\t \\-\\:]+>"
            - "^%[sv]$"
            # $(password)
            - "^\\$\\(\\w+\\)$"
            # #{password} and #{password}#
            - "^#\\{([^@/ ]+)\\}#?$"
            ${common/patternNot.yaml}

      examples:
        - text: |
            backend "pg" {
              conn_str1 = "mongo://user:pass@database.example/terraform_backend"
              conn_str2 = "mongodb://<:username:>:<:sonarpassword:>@<:sonarhost:>"
            }
          containsSecret: false
        - text: |
            connStr = fmt.Sprintf("mongodb://%s:%s@:%s/%s%ssslmode=%s&host=%s",
              url.PathEscape(dbUser), url.PathEscape(dbPasswd), port, dbName, dbParam, dbsslMode, host)
          containsSecret: false
        - text: |
            if (!newConfig.DATABASE_URL) {
              const encodedUser = encodeURIComponent(newConfig.POSTHOG_DB_USER)
              const encodedPassword = encodeURIComponent(newConfig.POSTHOG_DB_PASSWORD)
              newConfig.DATABASE_URL = `mongodb://${encodedUser}:${encodedPassword}@${newConfig.POSTHOG_MONGO_HOST}:${newConfig.POSTHOG_MONGO_PORT}/${newConfig.POSTHOG_DB_NAME}`
            }
          containsSecret: false
        - text: |
            SqlSettingsDefaultDataSource = "mongodb+srv://mmuser:#{db-password}@localhost/mattermost_test?sslmode=disable&connect_timeout=10&binary_parameters=yes"
          containsSecret: false
        - text: |
            SqlSettingsDefaultDataSource = "mongodb+srv://mmuser:mospass@localhost/mattermost_test?sslmode=disable&connect_timeout=10&binary_parameters=yes"
          containsSecret: true
          match: mospass
        - text: |
            SqlSettingsDefaultDataSource = "mongodb+srv://mmuser:mostest@localhost/mattermost_test?sslmode=disable&connect_timeout=10&binary_parameters=yes"
          fileName: Doc.md
          containsSecret: false
        - text: |
            passwordFile := fs.String("password", "../../../tools/secrets/password.txt", "password file")
            databasePrefix := fs.String("database-prefix", "mongodb://mongo:ku71CpsLfn8NYhhforGzCRL0@localhost:27017/ocr2vrf-test", "database prefix")
            databaseSuffixes := fs.String("database-suffixes", "sslmode=disable", "database parameters to be added")
          containsSecret: true
          match: ku71CpsLfn8NYhhforGzCRL0
        - text: |
            driver: mongodb
            dsn: mongodb://foouser:somepass@localhost:27017/testdb?sslmode=disable
            table: footable
          containsSecret: true
          match: somepass
        - text: |
            AIRFLOW_CONN_METADATA_DB=mongodb+srv://airflow:airflow@mongo:27017/airflow
            AIRFLOW_VAR__METADATA_DB_SCHEMA=airflow
          containsSecret: true
          match: airflow
        - text: |
            CONNECTION_STRING=mongodb://user:#{azure-replacement-token}#@mongo.local:27017/database"
          containsSecret: false
        - text: |
            CONNECTION_STRING=mongodb://user:xxx@mongo.local:27017/database"
          containsSecret: false
        - text: |
            uri: ${mongoUri:mongodb://root:example@localhost:27017}
          containsSecret: false
        - text: |
            re.search(r":(sqlserver://|mongodb://|oracle:thin:@)localhost|127\.0+\.0+\.1)[:;/]", jdbc_url):
          containsSecret: false
        - text: |
            MONGOURI=mongodb://mongo:Password123@mongo.local/database
          containsSecret: false

    - id: mongodb-cli-unquoted
      rspecKey: S6694
      metadata:
        name: MongoDB database passwords should not be disclosed
      detection:
        matching:
          pattern: "\\bmongo(?:dump|import|restore|sh)?(?=[ \\t]).{0,100}[ \\t](?:-p|--password)[ \\t]+([^\"'\\s]{3,})"
      examples:
        - text: |
            mongo --host localhost --username root --password password
          containsSecret: false
        - text: |
            mongodump --host localhost --user $USER --password $PASSWORD
          containsSecret: false
        - text: |
            echo mongo --host localhost --username root --password \$PASSWORD
          containsSecret: false
        - text: |
            mongosh "mongodb://localhost:27017" --username <username> --password <password>
          containsSecret: false
        - text: |
            mongo --host localhost --username root --password P@ssw0rd
          containsSecret: true
          match: P@ssw0rd
        - text: |
            mongo --host localhost --username root --password P@ssw0rd
          fileName: Doc.html
          containsSecret: false
        - text: |
            mongo --host localhost --username root --password ***
          containsSecret: false

    - id: mongodb-cli-quoted-outer
      rspecKey: S6694
      metadata:
        name: MongoDB database passwords should not be disclosed
      detection:
        matching:
          # Matches multiple kinds of mongo CLI tools
          # Allows for 100 characters before password (username, host, etc.)
          # Then matches quoted passwords, located after -p or --password.
          pattern: "\\bmongo(?:dump|import|restore|sh)?\
                    (?=[ \\t]).{0,100}[ \\t]\
                    (?:-p|--password)[ \\t]+\
                    \\\\?[\"']\
                        ([^\\r\\n\"']{3,})\
                    \\\\?[\"']"
      examples:
        - text: |
            mongo --host "localhost" --username "root" --password "password"
          containsSecret: false
        - text: |
            mongodump --host "localhost" --user "$USER" --password "$PASSWORD"
          containsSecret: false
        - text: |
            echo mongo --host "localhost" --username "root" --password "\$PASSWORD"
          containsSecret: false
        - text: |
            mongosh "mongodb://localhost:27017" --username "<username>" --password "<password>"
          containsSecret: false
        - text: |
            mongo --host "localhost" --username "root" --password "P@ssw0rd"
          containsSecret: true
          match: P@ssw0rd
        - text: |
            mongo --host "localhost" --username "root" --password "P@ssw0rd"
          fileName: Doc.adoc
          containsSecret: false
        - text: |
            mongo --host "localhost" --username "root" --password "..."
          containsSecret: false
