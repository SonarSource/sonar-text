provider:
  metadata:
    name: ODBC and JDBC
    category: Database API Standard
    message: Make sure this database password gets changed and removed from the code.
  rules:
    - id: java-datasource-unquoted
      rspecKey: S6703
      selectivity: generic
      metadata:
        name: Database passwords should not be disclosed
      detection:
        pre:
          scopes:
              - main
          include:
            content:
              - datasource
          reject:
            ext:
              ${common/rejectedExtensions.yaml}
            paths:
              - "**/appsettings.Development.json"
              - "**/appsettings.Local.json"
        matching:
          # Matches `*.datasource.*.password=some-password` (where the second `*.` is optional).
          # There also needs to be a `*.datasource.*.username=` nearby.
          pattern: "\\b[0-9a-z_\\-\\.]+\\.datasource(?:\\.[0-9a-z_\\-\\.]+){0,400}\\.password[ \\t]*=[ \\t]*(?!\")([^\\s]+)"
          context:
            patternAround: 
              pattern: "\\b[0-9a-z\\._\\-]+\\.datasource(?:\\.[0-9a-z\\._\\-]+){0,400}\\.username[ \\t]*="
              maxLineDistance: 3
        post:
          # Avoid matching values found on SourceGraph that look like dummy passwords or insertions.
          patternNot:
            # Common default password postgres
            - "^(postgres)$"
            ${common/patternNot.yaml}
      examples:
        - text: |
            spring.datasource.url= jdbc:postgresql://${DB_HOST}:${DB_PORT}/${DB_NAME}
            spring.datasource.username=${DB_USER}
            spring.datasource.password=${DB_PASSWORD}
          containsSecret: false
        - text: |
            spring.datasource.driverClassName = com.microsoft.sqlserver.jdbc.SQLServerDriver
            spring.datasource.username = xxx
            spring.datasource.password = xxx
          containsSecret: false
        - text: |
            spring.datasource.url=jdbc:postgresql://localhost:5432/petclinic
            spring.datasource.username=postgres
            spring.datasource.password=petclinic
            spring.datasource.driver-class-name=org.postgresql.Driver
          containsSecret: true
          match: petclinic
        - text: |
            spring.datasource.url=jdbc:postgresql://localhost:5432/petclinic
            spring.datasource.username=postgres
            spring.datasource.password=petclinic
            spring.datasource.driver-class-name=org.postgresql.Driver
          containsSecret: false
          fileName: Doc.adoc
        - text: |
            spring.datasource.driverClassName = org.h2.Driver
            spring.datasource.username = sa
            spring.datasource.password = ZVlrpkpFJ5ZTtOo0
          containsSecret: true
          match: "ZVlrpkpFJ5ZTtOo0"
        - text: |
            app.datasource.cardholder.url=jdbc:mysql://localhost:3306/cardholderdb?createDatabaseIfNotExist=true
            app.datasource.cardholder.username=root
            app.datasource.cardholder.password=P@ssw0rd
            app.datasource.cardholder.driverClassName=com.mysql.cj.jdbc.Driver
          containsSecret: true
          match: P@ssw0rd
        - text: |
            spring.datasource.username={{`{{ secret "user" }}`}}
            spring.datasource.password={{`{{ secret "p@ssword" }}`}}
          containsSecret: false
        - text: |
            spring.datasource.username={{`{{ secret "user" }}`}}
            spring.datasource.password=arn:aws:secretsmanager:eu-west-2:660254676590:secret:dev/postgresql-WEHbH0
          containsSecret: false
        # Common default password postgres
        - text: |
            spring.datasource.url=jdbc:postgresql://localhost:5432/petclinic
            spring.datasource.username=postgres
            spring.datasource.password=postgres
            spring.datasource.driver-class-name=org.postgresql.Driver
          containsSecret: false
        - text: |
            spring.datasource.password={cipher}190d8045dc5875c1004e4dd31f13194eea25043cf9ffc40550cca30fdcae20f8d7eed05f3c94058b206329dbe8d2312e
          containsSecret: false
        - text: |
            spring.datasource.password={cipher}QrQFaFw0iVFaPLUxWuXRWXqosqPhR5
          containsSecret: false

    - id: java-datasource-quoted
      rspecKey: S6703
      selectivity: generic
      metadata:
        name: Database passwords should not be disclosed
      detection:
        pre:
          scopes:
            - main
          include:
            content:
              - datasource
          reject:
            ext:
              ${common/rejectedExtensions.yaml}
            paths:
              - "**/appsettings.Development.json"
              - "**/appsettings.Local.json"
        matching:
          # Same as the file java-datasource-unquoted, except that the value is surrounded by double quotes.
          # This starts with a negative lookbehind to see if there's a double quote shortly before the string. This is
          # to prevent false negative matches with code like:
          #   param += " --spring.datasource.url=" + url
          #         + " --spring.datasource.username=" + username
          #         + " --spring.datasource.password=" + password;
          pattern: "(?<!\"[^\\r\\n\"]{0,6})\\b[0-9a-z_\\-\\.]+\\.datasource(?:\\.[0-9a-z_\\-\\.]+){0,400}\\.password[ \\t]*=[ \\t]*\"([^\"]+)\""
          context:
            patternAround: 
              pattern: "\\b[0-9a-z_\\.\\-]+\\.datasource(?:\\.[0-9a-z_\\.\\-]+){0,400}\\.username[ \\t]*="
              maxLineDistance: 3
        post:
          # Avoid matching values found on SourceGraph that look like dummy passwords or insertions.
          patternNot:
            # Common default password postgres
            - "^postgres$"
            ${common/patternNot.yaml}
      examples:
        - text: |
            spring.datasource.url="jdbc:mariadb://$NEW_DB_HOST:$NEW_DB_PORT/$NEW_DB_NAME"
            spring.datasource.username="$NEW_DB_USER"
            spring.datasource.password="$NEW_DB_PASS"
          containsSecret: false
        - text: |
            spring.datasource.url="jdbc:mysql://localhost:3306/mydatabase"
            spring.datasource.username="root"
            spring.datasource.password="password"
            spring.datasource.driver-class-name="com.mysql.jdbc.Driver"
          containsSecret: false
        - text: |
            param += " --spring.datasource.username=" + username + " --spring.datasource.password=" + password + " --spring.datasource.url=" + url;
          containsSecret: false
        - text: |
            db.default.datasource.username="root"
            db.default.datasource.password="P@ssw0rd"
          containsSecret: true
          match: P@ssw0rd
        - text: |
            db.default.datasource.username="root"
            db.default.datasource.password="P@ssw0rd"
          fileName: Doc.md
          containsSecret: false
        # Common default passwords for mysql and postgres
        - text: |
            db.default.datasource.username="root"
            db.default.datasource.password="root"
          containsSecret: false

    - id: jdbc-connection-string
      rspecKey: S6703
      selectivity: generic
      metadata:
        name: Database passwords should not be disclosed
      detection:
        pre:
          scopes:
            - main
          include:
            content:
              - jdbc
          reject:
            ext:
              ${common/rejectedExtensions.yaml}
            paths:
              - "**/appsettings.Development.json"
              - "**/appsettings.Local.json"
        matching:
          # JDBC URIs are in the form "jdbc:protocol://server:port/database?user=...&password=...&paramN=..."
          pattern: "\\bjdbc:[^\"\\s?]+\\?(?:[^&\"\\s]+&){0,400}password=([^&\"'`\\s]+)[&\"'`\\s]"
          context:
            patternAround:
              pattern: "(?i)\\b(?:user|username)="
              maxLineDistance: 0  # Also in the same URL string
        post:
          # Avoid matching values found on SourceGraph that look like dummy passwords or insertions.
          patternNot:
            - "^(?i)(?:db)?pass(word|wd)?$"
            - "^(?i)pwd(?-i)$"
            - "^\\[?PLACEHOLDER\\]?$"
            - "^\\{\\d*\\}$"
            # Potential FPs here are environment variables, templates and string substitutions, such as
            # - $my_password, $$my_password
            # - $db_password
            # - [mypass123]
            # - <example-password>
            # - %s
            # - {{MyPassword}}
            # - $(mypassword)
            # - ${mypassword}, $${mypassword}
            # - os.getenv("PASS")
            - "(?i)^(\\${1,2}[a-z_]*)?(db|my)?_?pass(word|wd)?"
            - "^\\[[\\w\\t \\-]+\\]$"
            - "\\$\\{\\w+(:-\\w+)?\\}"
            - "^`[a-z]+"
            # Common default password postgres
            - "^postgres$"
            ${common/patternNot.yaml}
      examples:
        - text: |
            return `jdbc:postgresql://${clone.db.host}:${clone.db.port}/DBNAME?user=${clone.db.username}&password=DBPASSWORD`
          containsSecret: false
        - text: |
            MYSQL_DSN="jdbc:mysql://database-server?user=myuser&password=password&sql_mode=STRICT_TRANS_TABLES,NO_ENGINE_SUBSTITUTION&useSSL=false"
            POSTGRES_DSN="jdbc:postgresql://database-server/mydb?user=myuser&password=password"
          containsSecret: false
        - text: |
            val jdbcDF = sparkSession.read
              .format("jdbc")
              .option("url", "jdbc:postgresql://database-server/mrui?user=mrui&password=password")
              .option("query", "select 123")
              .load()
          containsSecret: false
        - text: |
            ENV JDBC_URL="jdbc:postgresql://database-server/hello_world?user=dbuser&password=P@ssw0rd"
          containsSecret: true
          match: P@ssw0rd
        - text: |
            ENV JDBC_URL="jdbc:postgresql://database-server/hello_world?user=dbuser&password=P@ssw0rd"
          fileName: Doc.example
          containsSecret: false
        - text: |
            val sqlContext = new SQLContext(sc)
            val url = "jdbc:mysql://database-server:3306/retail_db?user=retail_dba&password=P@ssw0rd"
            sqlContext.load("jdbc", Map(
              "url" -> url,
              "dbtable" -> "departments")).collect().foreach(println)
          containsSecret: true
          match: P@ssw0rd
        - text: |
            connection_string = f"jdbc:mysql://localhost:3306/{d}?user={u}&password={p}"
          containsSecret: false
        # Common default passwords for postgres
        - text: |
            ENV JDBC_URL="jdbc:postgresql://database-server/hello_world?user=dbuser&password=postgres"
          containsSecret: false

    - id: odbc-connection-string
      rspecKey: S6703
      selectivity: generic
      metadata:
        name: Database passwords should not be disclosed
      detection:
        pre:
          scopes:
            - main
          include:
            content:
              - password
              - pwd
          reject:
            ext:
              ${common/rejectedExtensions.yaml}
            paths:
              - "**/appsettings.Development.json"
              - "**/appsettings.Local.json"
        matching:
          # Connection strings are key=value pairs separated by semicolons. Keys are case-insensitive.
          # The password parameter can be either "password" or "pwd".
          # There must also be a username parameter ("user id" or "uid") and one other parameter that's used to indicate
          # which database to use.
          pattern:
            "(?i)[;\"](?:password|pwd)=\
            ('[^'\\s]++'\
            |\"[^\"\\s]++\"\
            |[^\"';\\r\\n][^;\\r\\n]+)\
            [;\"'\\r\\n]"
          context:
            matchEach:
              - patternAround:
                  pattern: "(?i)\\b(?:user id|uid)="
                  maxLineDistance: 3
              - matchEither:
                - patternAround:
                    pattern: "(?i)\\bprovider="
                    maxLineDistance: 3
                - patternAround: 
                    pattern: "(?i)\\bdata source="
                    maxLineDistance: 3
                - patternAround: 
                    pattern: "(?i)\\binitial catalog="
                    maxLineDistance: 3
                - patternAround: 
                    pattern: "(?i)\\bdatabase="
                    maxLineDistance: 3
        post:
          # Avoid matching values found on SourceGraph that look like dummy passwords or insertions.
          patternNot:
            - "^(?i)pwd"
            - "^\\[?PLACEHOLDER\\]?$"
            # Azure RM templates
            - "parameters\\(+[^)]*\\)++"
            # Potential FPs here are environment variables, templates and string substitutions, such as
            # - $my_password, $$my_password
            # - $db_password
            # - [mypass123]
            # - <example-password>
            # - %s
            # - {{MyPassword}}
            # - $(mypassword)
            # - ${mypassword}, $${mypassword}
            # - os.getenv("PASS")
            # - os.environ['PASS']
            - "(?i)^(\\${1,2}[a-z_]*)?(db|my)?_?pass(word|wd)?"
            - "^\\[[\\w\\t \\-]+\\]$"
            - "^\\${1,2}[{(]"
            - "^`[a-z]+"
            - "\\{++[^}]*+\\}++"
            - "^<[\\w\\t -]{1,10}>?"
            # Common default password postgres
            - "^postgres$"
            ${common/patternNot.yaml}
      examples:
        - text: |
            server   = self.configuration.get('server', '')
            user     = self.configuration.get('user', '')
            password = self.configuration.get('password', '')
            db       = self.configuration['example']
            port     = self.configuration.get('port', 1337)
            charset  = self.configuration.get('charset', 'UTF-8')
            driver   = self.configuration.get('driver', '{Example}')

            conn = 'DRIVER = {};PORT = {};SERVER = {};DATABASE = {};UID = {};PWD = {}'
            conn = conn.format(driver, port, server, db, user, password)
          containsSecret: false

        - text: |
            $dbname = 'DRIVER={IBM DB2 ODBC DRIVER}' .
                     ';DATABASE=' . $this->_config['dbname'] .
                     ';HOSTNAME=' . $this->_config['host'] .
                     ';PORT='     . $this->_config['port'] .
                     ';PROTOCOL=' . $this->_config['protocol'] .
                     ';UID='      . $this->_config['username'] .
                     ';PWD='      . $this->_config['password'] .';';
          containsSecret: false

        - text: |
              "ConnectionStrings": {
                "DefaultConnection": "Server=tcp:url.windows.example.com,1433;Initial Catalog=sql-example;Persist Security Info=False;User ID={EXAMPLE_USER};Password={PASSWORD_HERE};MultipleActiveResultSets=False;Encrypt=True;TrustServerCertificate=False;Connection Timeout=60;"
                "sqlConnectionString": "concat('Data Source=',parameters('a'),';Initial Catalog=',parameters('b'),';User ID=',parameters('c'),';Password=',parameters('d'))"
              },
          containsSecret: false

        - text: |
            connStr := fmt.Sprintf("server=%s;database=%s;user id=%s;password=%s;",
              addr.Host,
              dsInfo.Database,
              dsInfo.User,
              dsInfo.DecryptedSecureJSONData["password"],
            )
          containsSecret: false
        - text: |
            <connection
              name="sqlserver-tds"
              factory="System.Data.SqlClient"
              connectionString="server=database-server;database=monotest;user id=monotester;password=PLACEHOLDER;"
              engine="sqlserver2005" />
          containsSecret: false
        - text: |
            // rspec noncompliant example
            public static string ConnectionString = "server=database-server;uid=user;pwd=P@ssw0rd;database=ProductionData";
          containsSecret: true
          match: P@ssw0rd
        - text: |
            // rspec noncompliant example
            public static string ConnectionString = "server=database-server;uid=user;pwd=P@ssw0rd;database=ProductionData";
          fileName: Doc.html
          containsSecret: false
        - text: |
            // rspec compliant example
            public static string ConnectionString = String.format(
                "server=database-server;uid=user;pwd=%s;database=ProductionData",
                System.getenv("DB_PASSWORD")
            )
          containsSecret: false
        - text: |
            private string WriterConnectionString => $"Data Source={configuration["SQLServerHostWriter"]};Initial Catalog={configuration["ShopGoDatabase"]};user id={configuration["ShopGoUserName"]};password={configuration["ShopGoPassword"]};Max Pool Size=1000;Encrypt=False";
          containsSecret: false
        - text: |
            private string WriterConnectionString => $"Data Source={configuration["SQLServerHostWriter"]};Initial Catalog={configuration["ShopGoDatabase"]};user id={configuration["ShopGoUserName"]};password=3GGb62XfnnlbKpHr;Max Pool Size=1000;Encrypt=False";
          containsSecret: true
          match: 3GGb62XfnnlbKpHr
        - text: |
            env:
              OrchardCore__ConnectionString: "server=database-server;uid=root;pwd=3GGb62XfnnlbKpHr;database=test"
              OrchardCore__DatabaseProvider: "MySql"
          containsSecret: true
          match: 3GGb62XfnnlbKpHr
        - text: |
            connection_string = (
              f"Driver={{ODBC Driver 18 for SQL Server}};"
              f"Server={os.environ.get('DATABASE_HOST')};"
              f"Database={os.environ.get('DATABASE_NAME')};"
              f"UID={os.environ.get('DATABASE_UID')};"
              f"PWD={os.environ.get('DATABASE_PASS')};"
            )
          containsSecret: false
        - text: |
            connection_string = (
              f"Driver={{ODBC Driver 18 for SQL Server}};"
              f"Server={os.environ.get('DATABASE_HOST')};"
              f"Database={os.environ.get('DATABASE_NAME')};"
              f"UID={os.environ.get('DATABASE_UID')};""
              f"PWD={config['password']};"
            )
          containsSecret: false
        - text: |
            $params['dbname'] = 'DRIVER={IBM DB2 ODBC DRIVER}' .
                     ';DATABASE=' . $params['dbname'] .
                     ';HOSTNAME=' . $params['host'] .
                     ';PROTOCOL=' . $params['protocol'] .
                     ';UID='      . $username .
                     ';PWD='      . $password .';';
          containsSecret: false
        - text: |
            environment:
              "ConnectionStrings__DefaultConnection": "Server=rockpaperscissors-sql,1433;Database=RockPaperScissorsBoom;User Id=SA;Password=;Encrypt=False;Persist Security Info=False;trusted_connection=False"
          containsSecret: false
        - text: |
            "ConnectionStrings": {
                "SaConnection": "Server={0};Database=DistrictsAndSubjectsDb;User Id={1};Password={2}"
            }
          containsSecret: false
        - text: |
            "ConnectionStrings": {
                "ApplicationDBContext": "Server=127.0.0.1;User ID=sa;Password=<YourStrong@Passw0rd>;Initial Catalog=PortChooser;TrustServerCertificate=true;"
            }
          containsSecret: false
        - text: |
            <connectionStrings>
              <add name="DefaultConnection" connectionString="Data Source=localhost;Initial Catalog={CONFIGURE_ME};User ID={CONFIGURE_ME};Password={CONFIGURE_ME}" providerName="System.Data.SqlClient" />
            </connectionStrings>
          containsSecret: false
        - text: |
            'DRIVER={ODBC Driver 17 for SQL Server};SERVER=host.docker.internal;DATABASE=bikes;Uid=SA;Pwd=reallyStrongPwd123'
          containsSecret: true
          match: reallyStrongPwd123
        - text: |
            'DRIVER={ODBC Driver 17 for SQL Server};SERVER=host.docker.internal;DATABASE=bikes;Uid=root;Pwd=root'
          containsSecret: false
