provider:  
  metadata:
      name: PostgreSQL
      category: Data storage
      message: Make sure this PostgreSQL database password gets changed and removed from the code.
  detection:
    pre:
      reject:
        paths:
          - "**/test/**"
          - "**/tests/**"
          - "**/Test/**"
          - "**/Tests/**"
          - "**/*Test*"
          - "**/*test*"
          - "**/*.Development*"
          - "**/*.development*"
          - "**/*.integration.*"
          - "**/*.Integration.*"
          - "**/*.QA.*"
    post:
      # Potential FPs here are environment variables, templates and string substitutions, such as
      # - $my_password
      # - $db_password
      # - [mypass123]
      # - <example-password>
      # - %s
      # - {{MyPassword}}
      # - $(mypassword)
      # - ${mypassword}
      # - os.getenv("PASS")
      # - os.environ['PASS']
      patternNot:
        - "(?i)^(\\$[a-z_]*)?(db|my)?_?pass(word|wd)?"
        - "^\\[[\\w\\t \\-]+\\]$"
        - "^<[\\w\\t -]{1,10}>?"
        - "^%s$"
        - "^\\$[{(]"
        - "^\\$[A-Z_]+$"
        - "\\$\\{\\w+(:-\\w+)?\\}"
        - "^\\{+[^}]*\\}+$"
        - "^\\*{3,}$"
        - "^`[a-z]+"
        - "\\b(get)?env(iron)?\\b"
        - "^None$"
        - "^\\$[a-z_]+pass(word)?$"
        - "^process\\.env\\."
        - "^\\{{2,}"

  rules:
    # Note:
    # The rules below treat the password "postgres" as a real password. It's the default password for the default
    # database user on a fresh PostgreSQL installation, so it should be changed.

    - id: postgres-url
      rspecKey: S6698
      metadata:
        name: PostgreSQL database passwords should not be disclosed
      detection:
        pre:
          include:
            content:
              - postgres
              - postgresql
              - postgis
          reject:
            paths:
              - "**/test/**"
              - "**/tests/**"
              - "**/Test/**"
              - "**/Tests/**"
              - "**/*Test*"
              - "**/*test*"
              - "**/*.Development*"
              - "**/*.development*"
              - "**/*.integration.*"
              - "**/*.Integration.*"
              - "**/*.QA.*"
        matching:
          # Look for URIs in the format "protocol://username:password@server:port/..."
          # The protocol can be either "postgres", "postgresql", or "postgis". It can also be followed by a subprotocol,
          # e.g. "postgresql+psycopg".
          # Certain special characters need to be percent-encoded so we can break matching when we find them.
          #
          # A negative lookbehind is added to avoid regex-based false positives.
          pattern: "(?is)\
                    (?<!regex.{1,50})\
                    \\bpostg(?:res(?:ql)?|is)(?:\\+\\w+)?://[^:@/ ]++:([^@/ ]++)@"
      examples:
        - text: |
            # Noncompliant code example
            uri = "postgres://foouser:foopass@example.com/testdb"
          containsSecret: true
          match: foopass
        - text: |
            # Compliant solution
            import os

            user     = os.environ["PG_USER"]
            password = os.environ["PG_PASSWORD"]
            uri      = f"postgres://{user}:{password}@example.com/testdb"
          containsSecret: false
        - text: |
              Regex regex("(postgis://.*:)(.*)(@.*)");
          containsSecret: false
        - text: |
              Regex regex(
                  "(postgres://.*:)(.*)(@.*)"
              );
          containsSecret: false
        - text: |
            backend "pg" {
              conn_str = "postgres://user:pass@database.example/terraform_backend"
            }
          containsSecret: false
        - text: |
            connStr = fmt.Sprintf("postgres://%s:%s@:%s/%s%ssslmode=%s&host=%s",
              url.PathEscape(dbUser), url.PathEscape(dbPasswd), port, dbName, dbParam, dbsslMode, host)
          containsSecret: false
        - text: |
            if (!newConfig.DATABASE_URL) {
              const encodedUser = encodeURIComponent(newConfig.POSTHOG_DB_USER)
              const encodedPassword = encodeURIComponent(newConfig.POSTHOG_DB_PASSWORD)
              newConfig.DATABASE_URL = `postgres://${encodedUser}:${encodedPassword}@${newConfig.POSTHOG_POSTGRES_HOST}:${newConfig.POSTHOG_POSTGRES_PORT}/${newConfig.POSTHOG_DB_NAME}`
            }
          containsSecret: false
        - text: |
            SqlSettingsDefaultDataSource = "postgres://mmuser:mostest@localhost/mattermost_test?sslmode=disable&connect_timeout=10&binary_parameters=yes"
          containsSecret: true
          match: mostest
        - text: |
            passwordFile := fs.String("password", "../../../tools/secrets/password.txt", "password file")
            databasePrefix := fs.String("database-prefix", "postgres://postgres:postgres_password_padded_for_security@localhost:5432/ocr2vrf-test", "database prefix")
            databaseSuffixes := fs.String("database-suffixes", "sslmode=disable", "database parameters to be added")
          containsSecret: true
          match: postgres_password_padded_for_security
        - text: |
            driver: postgres
            dsn: postgres://foouser:foopass@localhost:5432/testdb?sslmode=disable
            table: footable
          containsSecret: true
          match: foopass
        - text: |
            AIRFLOW_CONN_METADATA_DB=postgres+psycopg2://airflow:airflow@postgres:5432/airflow
            AIRFLOW_VAR__METADATA_DB_SCHEMA=airflow
          containsSecret: true
          match: airflow
        - text: |
            export const dbConnection = `postgres://${process.env.DB_USER}:${process.env.DB_PASSWORD}@${process.env.DB_HOST}/${process.env.DB_NAME}`
          containsSecret: false

    - id: postgres-url-password-from-env-with-default
      rspecKey: S6698
      metadata:
        name: PostgreSQL database passwords should not be disclosed
      detection:
        pre:
          include:
            content:
              - postgres
              - postgresql
              - postgis
          reject:
            paths:
              - "**/test/**"
              - "**/tests/**"
              - "**/Test/**"
              - "**/Tests/**"
              - "**/*Test*"
              - "**/*test*"
              - "**/*.Development*"
              - "**/*.development*"
              - "**/*.integration.*"
              - "**/*.Integration.*"
              - "**/*.QA.*"
        matching:
          # Look for URIs in the format "protocol://username:${ENV_VAR:-default_password}@server:port/..."
          # The portion "${ENV_VAR:-default_password}" contains a default password that's used if the environment
          # variable isn't set. It's that default password that we're matching.
          # The protocol can be either "postgres", "postgresql", or "postgis". It can also be followed by a subprotocol,
          # e.g. "postgresql+psycopg".
          # Certain special characters need to be percent-encoded so we can break matching when we find them.
          pattern: "\\bpostg(?:res(?:ql)?|is)(?:\\+\\w+)?://[^:@/ ]+(?::[^:@/ ]+)*?:\\$\\{[^:]+:-([^@/ ]+)\\}@"
      examples:
        - text: |
            environment:
              PUBLIC_URL: http://localhost:${PROXY_PORT:-1337}
              POSTGRES_MIGRATIONS: 1
              POSTGRES_MIGRATIONS_SOURCE: postgres://postgres:${POSTGRES_PASSWORD:-secretpgpassword}@postgres:5432/postgres?sslmode=disable
          containsSecret: true
          match: secretpgpassword
        - text: |
            OPENPROJECT_RAILS__RELATIVE__URL__ROOT: "${OPENPROJECT_RAILS__RELATIVE__URL__ROOT:-}"
            DATABASE_URL: postgresql://${DB_USERNAME:-postgres}:${DB_PASSWORD:-postgres}@${DB_HOST:-db}:${DB_PORT:-5432}/${DB_DATABASE:-openproject}
            OPENPROJECT_EDITION: ${OPENPROJECT_EDITION:-standard}
          containsSecret: true
          match: postgres

    - id: postgres-env-pg_password-unquoted
      rspecKey: S6698
      metadata:
        name: PostgreSQL database passwords should not be disclosed
      detection:
        pre:
          include:
            content:
              - PG_PASSWORD
          reject:
            paths:
              - "**/test/**"
              - "**/tests/**"
              - "**/Test/**"
              - "**/Tests/**"
              - "**/*Test*"
              - "**/*test*"
              - "**/*.Development*"
              - "**/*.development*"
              - "**/*.integration.*"
              - "**/*.Integration.*"
              - "**/*.QA.*"
            ext:
              - .md
              - .html
              - .example
              - .template
        matching:
          # looks for occurrences of the string `PG_PASSWORD=` followed by a value that is not enclosed in single or double quotes.
          pattern: "\\bPG_PASSWORD=(?!\\\\?[\"'])([^\\s]+)(?:$|\\s)"
      examples:
        - text: |
            PG_USER=postgres
            PG_PASSWORD=password
            PG_DB=postgres
          containsSecret: false
        - text: |
            environment:
            - PG_USER=<enter username>
            - PG_PASSWORD=<enter password>
            - PG_DB=postgres
          containsSecret: false
        - text: |
            PG_USER=$DB_USER
            PG_PASSWORD=$DB_PASS
            PG_PORT=5436
          containsSecret: false
        - text: |
            PG_PASSWORD=$(cat /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w 10 | head -n 1)
          containsSecret: false
        - text: |
            PG_USER=${PG_USER}
            PG_PASSWORD=${PG_PASSWORD}
            PG_DATABASE=${PG_DATABASE}
          containsSecret: false
        - text: |
            if [ "${PG_PASSWORD-}" == "" ]; then
              PG_PASSWORD=dev_DVwgY7H5p3QgiZQr3tCo5X
            fi
          containsSecret: true
          match: dev_DVwgY7H5p3QgiZQr3tCo5X
        - text: |
            PG_HOST=localhost
            PG_PASSWORD=P@ssw0rd
            PG_USER=postgres
          containsSecret: true
          match: P@ssw0rd
        - text: |
            PG_HOST=localhost
            PG_PASSWORD=P@ssw0rd
            PG_USER=postgres
          containsSecret: false
          fileName: appsettings.QA.json
        - text: |
            PG_USER=env("PG_USER")
            PG_PASSWORD=env("PG_PASSWORD")
            PG_DATABASE=env("PG_DATABASE")
          containsSecret: false
        - text: |
            PG_USER=os.getenv("PG_USER")
            PG_PASSWORD=os.getenv("PG_PASSWORD")
            PG_DATABASE=os.getenv("PG_DATABASE")
          containsSecret: false
        - text: |
            PG_USER=os.environ['PG_USER']
            PG_PASSWORD=os.environ['PG_PASSWORD']
            PG_DATABASE=os.environ['PG_DATABASE']
          containsSecret: false

    - id: postgres-env-pg_password-quoted
      rspecKey: S6698
      metadata:
        name: PostgreSQL database passwords should not be disclosed
      detection:
        pre:
          include:
            content:
              - PG_PASSWORD
          reject:
            paths:
              - "**/test/**"
              - "**/tests/**"
              - "**/Test/**"
              - "**/Tests/**"
              - "**/*Test*"
              - "**/*test*"
              - "**/*.Development*"
              - "**/*.development*"
              - "**/*.integration.*"
              - "**/*.Integration.*"
              - "**/*.QA.*"
            ext:
              - .md
              - .html
              - .example
              - .template
        matching:
          pattern: "\\bPG_PASSWORD=(?:\\\\?[\"'])([^\\r\\n\"']+)(?:\\\\?[\"'])"
      examples:
        - text: |
            PG_USER="postgres"
            PG_PASSWORD="password"
            PG_DB="postgres"
          containsSecret: false
        - text: |
            environment:
            - PG_USER="<enter username>"
            - PG_PASSWORD="<enter password>"
            - PG_DB="postgres"
          containsSecret: false
        - text: |
            PG_USER="$DB_USER"
            PG_PASSWORD="$DB_PASS"
            PG_PORT="5436"
          containsSecret: false
        - text: |
            PG_PASSWORD="$(cat /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w 10 | head -n 1)"
          containsSecret: false
        - text: |
            PG_USER="${PG_USER}"
            PG_PASSWORD="${PG_PASSWORD}"
            PG_DATABASE="${PG_DATABASE}"
          containsSecret: false
        - text: |
            if [ "${PG_PASSWORD-}" == "" ]; then
              PG_PASSWORD="dev_DVwgY7H5p3QgiZQr3tCo5X"
            fi
          containsSecret: true
          match: dev_DVwgY7H5p3QgiZQr3tCo5X
        - text: |
            PG_HOST="localhost"
            PG_PASSWORD="P@ssw0rd"
            PG_USER="postgres"
          containsSecret: true
          match: P@ssw0rd
        - text: |
            PG_USER=env("PG_USER")
            PG_PASSWORD=env("PG_PASSWORD")
            PG_DATABASE=env("PG_DATABASE")
          containsSecret: false
        - text: |
            PG_USER=os.getenv("PG_USER")
            PG_PASSWORD=os.getenv("PG_PASSWORD")
            PG_DATABASE=os.getenv("PG_DATABASE")
          containsSecret: false
        - text: |
            PG_USER=os.environ['PG_USER']
            PG_PASSWORD=os.environ['PG_PASSWORD']
            PG_DATABASE=os.environ['PG_DATABASE']
          containsSecret: false

    - id: psql-cli-unquoted
      rspecKey: S6698
      metadata:
        name: PostgreSQL database passwords should not be disclosed
      detection:
        pre:
          include:
            content:
              - psql
          reject:
            paths:
              - "**/test/**"
              - "**/tests/**"
              - "**/Test/**"
              - "**/Tests/**"
              - "**/*Test*"
              - "**/*test*"
              - "**/*.Development*"
              - "**/*.development*"
              - "**/*.integration.*"
              - "**/*.Integration.*"
              - "**/*.QA.*"
            ext:
              - .md
              - .html
              - .example
              - .template
        matching:
          pattern: "\\bPGPASSWORD=(?!\\\\?[\"'])([^\\s;]+).{1,40}\\bpsql\\b"
      examples:
        - text: |
            PGPASSWORD=password psql -h localhost
          containsSecret: false
        - text: |
            PGPASSWORD=*** psql -h localhost
          containsSecret: false
        - text: |
            PGPASSWORD=${POSTGRES_PASSWORD} psql -h localhost
          containsSecret: false
        - text: |
            PGPASSWORD=P@ssw0rd psql -h localhost
          containsSecret: true
          match: P@ssw0rd

    - id: psql-cli-quoted
      rspecKey: S6698
      metadata:
        name: PostgreSQL database passwords should not be disclosed
      detection:
        pre:
          include:
            content:
              - psql
          reject:
            paths:
              - "**/test/**"
              - "**/tests/**"
              - "**/Test/**"
              - "**/Tests/**"
              - "**/*Test*"
              - "**/*test*"
              - "**/*.Development*"
              - "**/*.development*"
              - "**/*.integration.*"
              - "**/*.Integration.*"
              - "**/*.QA.*"
            ext:
              - .md
              - .html
              - .example
              - .template
        matching:
          pattern: "\\bPGPASSWORD=(?:\\\\?[\"'])([^\\r\\n\"']+)(?:\\\\?[\"']).{1,40}\\bpsql\\b"
      examples:
        - text: |
            PGPASSWORD="password" psql -h localhost
          containsSecret: false
        - text: |
            PGPASSWORD="***" psql -h localhost
          containsSecret: false
        - text: |
            PGPASSWORD="${POSTGRES_PASSWORD}" psql -h localhost
          containsSecret: false
        - text: |
            PGPASSWORD="P@ssw0rd" psql -h localhost
          containsSecret: true
          match: P@ssw0rd
        - text: |
            PGPASSWORD="P@ssw0rd" psql -h localhost
          containsSecret: false
          fileName: pgTest.java
