provider:  
  metadata:
      name: MySQL
      category: Data storage
      message: Make sure this MySQL database password gets changed and removed from the code.

  rules:
    # Note:
    # The rules below treat the password "mysql" as a real password. It's the default password for the default
    # database user on a fresh MySQL installation, so it should be changed.

    - id: mysql-url
      rspecKey: S6697
      metadata:
        name: MySQL database passwords should not be disclosed
      detection:
        pre:
          include:
            content:
              - mysql
              - mysqlx
        matching:
          # Look for URIs in the format "protocol://username:password@server:port/..."
          # The protocol is "mysql" or "mysqlx" but can also be followed by a subprotocol, e.g. "mysql+mysqldb".
          # Certain special characters need to be percent-encoded so we can break matching when we find them.
          pattern: "\\b\
                    mysqlx?(?:\\+\\w+)?\
                    ://\
                    (?:\\{+[^}]*\\}+|[^{][^:@/ ]+)\
                    :\
                    ([^@/ ]{2,})@"
        post:
          # Avoid matching values found on SourceGraph that look like dummy passwords or insertions.
          patternNot:
            - "^.$"
            - "^(?i)pass(word|wd)?$"
            - "^%s$"
            - "^\\$[A-Z_]+$"
            - "^\\{.*\\}$"
            - "^'\\{.*\\}'$"
            - "^\\$[{(]"
            - "^<[\\w\\t -]{1,10}>?"
            - "\\$[({]\\w+(:-\\w+)?[})]"
      examples:
        - text: |
            backend "mysql" {
              conn_str = "mysql://user:pass@database.example/terraform_backend"
            }
          containsSecret: false
        - text: |
            connStr = fmt.Sprintf("mysql://%s:%s@%s:%s/%s?%s",
              url.PathEscape(dbUser), url.PathEscape(dbPasswd), host, port, dbName, dbParam)
          containsSecret: false
        - text: |
            if (!newConfig.DATABASE_URL) {
              const encodedUser = encodeURIComponent(newConfig.POSTHOG_DB_USER)
              const encodedPassword = encodeURIComponent(newConfig.POSTHOG_DB_PASSWORD)
              newConfig.DATABASE_URL = `mysql://${encodedUser}:${encodedPassword}@${newConfig.POSTHOG_MYSQL_HOST}:${newConfig.POSTHOG_MYSQL_PORT}/${newConfig.POSTHOG_DB_NAME}`
            }
          containsSecret: false
        - text: |
            SqlSettingsDefaultDataSource = "mysql://mmuser:mostest@localhost/mattermost_test?connect_timeout=10"
          containsSecret: true
          match: mostest
        - text: |
            passwordFile := fs.String("password", "../../../tools/secrets/password.txt", "password file")
            databasePrefix := fs.String("database-prefix", "mysql://mysql:mysql_password_padded_for_security@localhost:3306/ocr2vrf-test", "database prefix")
            databaseSuffixes := fs.String("database-suffixes", "connect_timeout=10", "database parameters to be added")
          containsSecret: true
          match: mysql_password_padded_for_security
        - text: |
            driver: mysql
            dsn: mysql://foouser:foopass@localhost:3306/testdb?connect_timeout=10
            table: footable
          containsSecret: true
          match: foopass
        - text: |
            AIRFLOW_CONN_METADATA_DB=mysql+mysqldb://airflow:airflow@mysql:3306/airflow
            AIRFLOW_VAR__METADATA_DB_SCHEMA=airflow
          containsSecret: true
          match: airflow
        - text: |
            "source": r"mysql://{user}:'{pwd}'@{host}:{port}/{database}".format(user=instance_info.user,
              pwd=instance_info.password,
              host=instance_info.host,
              port=instance_info.port,
              database=db_name),
          containsSecret: false

    - id: mysql-env-mysql_password-unquoted
      rspecKey: S6697
      metadata:
        name: MySQL database passwords should not be disclosed
      detection:
        pre:
          include:
            content:
              - MYSQL_PASSWORD
          reject:
            ext:
              - .md
              - .html
              - .example
              - .template
        matching:
          pattern: "\\bMYSQL_PASSWORD=(?!\\\\?[\"'])([^\\s]+)(?:$|\\s)"
        post:
          # Avoid matching values found on SourceGraph that look like dummy passwords or insertions.
          patternNot:
            - "^(db|my)?_?pass(word|wd)?$"
            - "^None$"
            - "^\\*{3,}$"
            - "^\\$[A-Z_]+PASS(WORD)?$"
            - "^\\$[{(]"
            - "^`[a-z]+"
            - "^process\\.env\\."
            - "^<[a-z ]{1,10}>?$"
      examples:
        - text: |
            MYSQL_USER=mysql
            MYSQL_PASSWORD=password
            MYSQL_DB=mysql
          containsSecret: false
        - text: |
            environment:
            - MYSQL_USER=<enter username>
            - MYSQL_PASSWORD=<enter password>
            - MYSQL_DB=mysql
          containsSecret: false
        - text: |
            MYSQL_USER=$DB_USER
            MYSQL_PASSWORD=$DB_PASS
            MYSQL_PORT=5436
          containsSecret: false
        - text: |
            MYSQL_PASSWORD=$(cat /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w 10 | head -n 1)
          containsSecret: false
        - text: |
            ENV MYSQL_USER=${MYSQL_USER}
            ENV MYSQL_PASSWORD=${MYSQL_PASSWORD}
            ENV MYSQL_DATABASE=${MYSQL_DATABASE}
          containsSecret: false
        - text: |
            if [ "${MYSQL_PASSWORD-}" == "" ]; then
              MYSQL_PASSWORD=dev_DVwgY7H5p3QgiZQr3tCo5X
            fi
          containsSecret: true
          match: dev_DVwgY7H5p3QgiZQr3tCo5X
        - text: |
            MYSQL_HOST=localhost
            MYSQL_PASSWORD=P@ssw0rd
            MYSQL_USER=mysql
          containsSecret: true
          match: P@ssw0rd

    - id: mysql-env-mysql_password-quoted
      rspecKey: S6697
      metadata:
        name: MySQL database passwords should not be disclosed
      detection:
        pre:
          include:
            content:
              - MYSQL_PASSWORD
          reject:
            ext:
              - .md
              - .html
              - .example
              - .template
        matching:
          pattern: "\\bMYSQL_PASSWORD=(?:\\\\?[\"'])([^\\r\\n\"']+)(?:\\\\?[\"'])"
        post:
          # Avoid matching values found on SourceGraph that look like dummy passwords or insertions.
          patternNot:
            - "^(db|my)?_?pass(word|wd)?$"
            - "^None$"
            - "^\\*{3,}$"
            - "^\\$[A-Z_]+PASS(WORD)?$"
            - "^\\$[{(]|^`[a-z]+"
            - "^process\\.env\\."
            - "^<[a-z ]+>?$"
      examples:
        - text: |
            MYSQL_USER="mysql"
            MYSQL_PASSWORD="password"
            MYSQL_DB="mysql"
          containsSecret: false
        - text: |
            environment:
            - MYSQL_USER="<enter username>"
            - MYSQL_PASSWORD="<enter password>"
            - MYSQL_DB="mysql"
          containsSecret: false
        - text: |
            MYSQL_USER="$DB_USER"
            MYSQL_PASSWORD="$DB_PASS"
            MYSQL_PORT="5436"
          containsSecret: false
        - text: |
            MYSQL_PASSWORD="$(cat /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w 10 | head -n 1)"
          containsSecret: false
        - text: |
            ENV MYSQL_USER="${MYSQL_USER}"
            ENV MYSQL_PASSWORD="${MYSQL_PASSWORD}"
            ENV MYSQL_DATABASE="${MYSQL_DATABASE}"
          containsSecret: false
        - text: |
            if [ "${MYSQL_PASSWORD-}" == "" ]; then
              MYSQL_PASSWORD="dev_DVwgY7H5p3QgiZQr3tCo5X"
            fi
          containsSecret: true
          match: dev_DVwgY7H5p3QgiZQr3tCo5X
        - text: |
            MYSQL_HOST="localhost"
            MYSQL_PASSWORD="P@ssw0rd"
            MYSQL_USER="mysql"
          containsSecret: true
          match: P@ssw0rd

    - id: mysql-cli-unquoted
      rspecKey: S6697
      metadata:
        name: MySQL database passwords should not be disclosed
      detection:
        pre:
          include:
            content:
              - mysql
              - mysqladmin
          reject:
            ext:
              - .md
              - .html
              - .example
              - .template
        matching:
          pattern: "\\bmysql(?:admin|dump)?(?=[ \\t]).{0,100}[ \\t](?:-p|--password=)(?!\"')([^\\s\"']{3,})"
        post:
          # Avoid matching values found on SourceGraph that look like dummy passwords or insertions.
          patternNot:
            - "^(db|my)?_?pass(word|wd)?$"
            - "^\\*{3,}$"
            - "^\\$[A-Z_]+$"
            - "^\\$[{(]"
            - "^\\{{2,}"
      examples:
        - text: |
            mysql --host=localhost --user=root --password=password
          containsSecret: false
        - text: |
            mysqladmin -hlocalhost -uroot -ppassword
          containsSecret: false
        - text: |
            mysqladmin -h localhost -u root -p${PASSWORD}
          containsSecret: false
        - text: |
            `sudo /usr/bin/mysql -u root -p`
          containsSecret: false
        - text: |
            All command below are taking mysql as example. For postgres, simply use with "--plugin postgres"
          containsSecret: false
        - text: |
            mysql --host=localhost --user=root --password=P@ssw0rd
          containsSecret: true
          match: P@ssw0rd

    - id: mysql-cli-quoted-outer
      rspecKey: S6697
      metadata:
        name: MySQL database passwords should not be disclosed
      detection:
        pre:
          include:
            content:
              - mysql
              - mysqladmin
          reject:
            ext:
              - .md
              - .html
              - .example
              - .template
        matching:
          pattern: "\\bmysql(?:admin)?(?=[ \\t]).{0,100}[ \\t]\\\\?[\"'](?:-p|--password=)([^\\r\\n\"']{3,})\\\\?[\"']"
        post:
          # Avoid matching values found on SourceGraph that look like dummy passwords or insertions.
          patternNot:
            - "(db|my)?_?pass(word|wd)?"
            - "^\\*{3,}$"
            - "^\\$[A-Z_]+$"
            - "^\\$[{(]"
            - "^\\{{2,}"
      examples:
        - text: |
            $cmd = "mysql -h \"$host\" -u \"$user\" \"--password=$password\" {$this->dbName}"
          containsSecret: false

        - text: |
            mysql --host=localhost --user=root "--password=password"
          containsSecret: false
        - text: |
            mysqladmin -hlocalhost -uroot "-ppassword"
          containsSecret: false
        - text: |
            mysqladmin -h localhost -u root "-p${PASSWORD}"
          containsSecret: false
        - text: |
            mysql --host=localhost --user=root "--password=P@ssw0rd"
          containsSecret: true
          match: P@ssw0rd

    - id: mysql-cli-quoted-inner
      rspecKey: S6697
      metadata:
        name: MySQL database passwords should not be disclosed
      detection:
        pre:
          reject:
            ext:
              - .md
              - .html
              - .example
              - .template
        matching:
          pattern: "\\bmysql(?:admin)?(?=[ \\t]).{0,100}[ \\t](?:-p|--password=)\\\\?[\"']([^\\r\\n\"']{3,})\\\\?[\"']"
        post:
          # Avoid matching values found on SourceGraph that look like dummy passwords or insertions.
          patternNot:
            - "(?:db|my)?_?pass(?:word|wd)?"
            - "^\\*{3,}$"
            - "^\\$[\\w]+$"
            - "^\\$[{(]"
            - "^\\{{2,}"
      examples:
        - text: |
            mysql --host=localhost --user=root --password="password"
          containsSecret: false
        - text: |
            mysqladmin -hlocalhost -uroot -p"password"
          containsSecret: false
        - text: |
            mysqladmin -h localhost -u root -p"${PASSWORD}"
          containsSecret: false
        - text: |
            mysql --host=localhost --user=root --password="P@ssw0rd"
          containsSecret: true
          match: P@ssw0rd
