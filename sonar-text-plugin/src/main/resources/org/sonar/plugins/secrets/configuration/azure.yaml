provider:
  metadata:
    name: Azure
    category: Cloud provider
    message: Make sure this Azure Storage Account Key gets revoked, changed, and removed from the code.
  detection:
    post:
      patternNot:
        - "EXAMPLE"
        # Azure Storage / Azurite emulator
        - "Eby8vdM02xNOcqFlqUwJPLlmEtlCDXJ1OUzFT50uSRZ6IFsuFq2UVErCz4I6tq/K1SZFPTOtr/KBHBeksoGMGw=="
        # CosmosDB Local emulator
        - "C2y6yDjf5/R\\+ob0N8A7Cgv30VRDJIWEHLM\\+4QDU5DE2nQ9nDuVTqobD4b8mGGyPMbIZnqyMsEcaGQy67XIw/Jw=="

  rules:
    - rspecKey: S6338
      id: azure-storage-account-keys-1
      metadata:
        name: Azure Storage Account Keys
      detection:
        pre:
          include:
            content:
              - "core.windows.net"
        matching:
          pattern: "['\"`]([a-zA-Z0-9/\\+]{86}==)['\"`]"
      examples:
        - text: |
            # Noncompliant code example
            using Azure.Storage.Blobs;
            using Azure.Storage;

            class Example
            {
                static void Main(string[] args)
                {
                    string account = "accountname";
                    string accountKey = "4dVw+l0W8My+FwuZ08dWXn+gHxcmBtS7esLAQSrm6/Om3jeyUKKGMkfAh38kWZlItThQYsg31v23A0w/uVP4pg=="; // Noncompliant
                    StorageSharedKeyCredential sharedKeyCredential = new StorageSharedKeyCredential(account, accountKey);

                    BlobServiceClient blobServiceClient = new BlobServiceClient(
                        new Uri($"https://{account}.blob.core.windows.net"),
                        sharedKeyCredential);
                }
            }

          containsSecret: true
          match: 4dVw+l0W8My+FwuZ08dWXn+gHxcmBtS7esLAQSrm6/Om3jeyUKKGMkfAh38kWZlItThQYsg31v23A0w/uVP4pg==

        - text: |
            # Compliant solution
            ## Solution using environment variables:
            using System;
            using Azure.Storage.Blobs;
            using Azure.Storage;

            class Example
            {
                static void Main(string[] args)
                {
                    string account = Environment.GetEnvironmentVariable("ACCOUNT_NAME");
                    string accountKey = Environment.GetEnvironmentVariable("ACCOUNT_KEY");
                    StorageSharedKeyCredential sharedKeyCredential = new StorageSharedKeyCredential(account, accountKey);

                    BlobServiceClient blobServiceClient = new BlobServiceClient(
                        new Uri($"https://{account}.blob.core.windows.net"),
                        sharedKeyCredential);
                }
            }
          containsSecret: false
        - text: |
            # Compliant solution
            ## Solution using a passwordless approach, thanks to DefaultAzureCredential:
            using System;
            using Azure.Storage.Blobs;
            using Azure.Identity;

            class Example
            {
                static void Main(string[] args)
                {
                    string account = Environment.GetEnvironmentVariable("ACCOUNT_NAME");
                    var blobServiceClient = new BlobServiceClient(
                            new Uri($"https://{account}.blob.core.windows.net"),
                            new DefaultAzureCredential());
                }
            }
          containsSecret: false
        - text: |
            async function main() {
              const account = process.env.ACCOUNT_NAME || "accountname";
              const accountKey = process.env.ACCOUNT_KEY || "4dVw+l0W8My+FwuZ08dWXn+gHxcmBtS7esLAQSrm6/Om3jeyUKKGMkfAh38kWZlItThQYsg31v23A0w/uVP4pg==";
              const sharedKeyCredential = new StorageSharedKeyCredential(account, accountKey);
              const blobServiceClient = new BlobServiceClient(
                `https://${account}.blob.core.windows.net`,
                sharedKeyCredential
              );
            }
          containsSecret: true
          match: 4dVw+l0W8My+FwuZ08dWXn+gHxcmBtS7esLAQSrm6/Om3jeyUKKGMkfAh38kWZlItThQYsg31v23A0w/uVP4pg==
        - text: |
            AccountKey = "BtS7esLAQSrm6/Om3jeyUKKGMkfAh38kWZlItThQYsg31v23A0w/uVP4pg==";
          containsSecret: false

    - rspecKey: S6338
      id: azure-storage-account-keys-2
      metadata:
        name: Azure Storage Account Keys
      detection:
        pre:
          include:
            content:
              - "AccountKey="
        matching:
          pattern: "AccountKey=([a-zA-Z0-9/\\+]{86}==)"
      examples:

        - text: |
            const connStr = "DefaultEndpointsProtocol=https;AccountName=testaccountname;AccountKey=4dVw+l0W8My+FwuZ08dWXn+gHxcmBtS7esLAQSrm6/Om3jeyUKKGMkfAh38kWZlItThQYsg31v23A0w/uVP4pg==";
          containsSecret: true
          match: 4dVw+l0W8My+FwuZ08dWXn+gHxcmBtS7esLAQSrm6/Om3jeyUKKGMkfAh38kWZlItThQYsg31v23A0w/uVP4pg==
        - text: |
            const connStr = "DefaultEndpointsProtocol=https;AccountName=testaccountname;AccountKey=4dVw+l0W8My+FwuZ08dWXn+gHxcmBtS7esLAQSrm6/Om3jeyUKKGMkfAh38kWZlItThQYsg31v23A0w/uVP4pg==;EndpointSuffix=core.windows.net";
          containsSecret: true
          match: 4dVw+l0W8My+FwuZ08dWXn+gHxcmBtS7esLAQSrm6/Om3jeyUKKGMkfAh38kWZlItThQYsg31v23A0w/uVP4pg==
        - text: |
            AccountKey = "BtS7esLAQSrm6/Om3jeyUKKGMkfAh38kWZlItThQYsg31v23A0w/uVP4pg==";
          containsSecret: false
        - text: |
            const connStr = "DefaultEndpointsProtocol=https;AccountName=testaccountname;AccountKey=4dVw+l0W8My+FwuZ08dWXn+gHxcmBtS7esLAQSrm6/Om3jeyUKKGMkfAh38kWZlItThQYsg31v23A0w/uVP4pg==;EndpointSuffix=core.windows.net";
          containsSecret: true
          match: 4dVw+l0W8My+FwuZ08dWXn+gHxcmBtS7esLAQSrm6/Om3jeyUKKGMkfAh38kWZlItThQYsg31v23A0w/uVP4pg==
        - text: |
            const connStr = "DefaultEndpointsProtocol=https;AccountName=testaccountname;AccountKey=Eby8vdM02xNOcqFlqUwJPLlmEtlCDXJ1OUzFT50uSRZ6IFsuFq2UVErCz4I6tq/K1SZFPTOtr/KBHBeksoGMGw==";
            const connStr = "DefaultEndpointsProtocol=https;AccountName=testaccountname;AccountKey=C2y6yDjf5/R+ob0N8A7Cgv30VRDJIWEHLM+4QDU5DE2nQ9nDuVTqobD4b8mGGyPMbIZnqyMsEcaGQy67XIw/Jw==";
          # These are well-known keys used in emulators only
          containsSecret: false

    - id: azure-subscription-keys
      rspecKey: S6684
      metadata:
        name: Azure subscription keys should not be leaked
      detection:
        pre:
          include:
            content:
              - "Subscription"

        matching:
          # While pretty generic, looking for this pattern in the wild lands a majority of actual Azure keys.
          # As Azure is Microsoft-oriented, a check for the existence of its KeyVault is added to avoid FPs.
          # The threshold to 150 characters is used to avoid as big vault urls as possible.
          pattern: "(?is)\
                    (?<!@Microsoft\\.KeyVault\\([^)]{1,150})\
                    Subscription[_\\-\\.]Key.{1,15}\\b([a-f0-9]{32})\\b"
        post:
          statisticalFilter:
            threshold: 3.0
      examples:
        - text: |
            data = self._download_json(
              f'https://production.example.com/platform/{path}', video_id, headers={
                'Ocp-Apim-Subscription-Key': 'efbb1a98f026d061464af685cd16dcd3',
              })['data']
          containsSecret: true
          match: efbb1a98f026d061464af685cd16dcd3
        - text: |
            this.bot = new builder.TextBot();
            this.dialog = new builder.LuisDialog('https://api.example.org/luis/v1/application?id=05487aa0-3fcf-4cf6-97e7-7ac1a12537e1&subscription-key=efbb1a98f026d061464af685cd16dcd3');
            this.bot.add('/', this.dialog);
          containsSecret: true
          match: efbb1a98f026d061464af685cd16dcd3
        - text: |
              "SonarService:OcpApimSubscriptionKey": "@Microsoft.KeyVault(SecretUri=https://example.vault.azure.net/secrets/Some-Subscription-Key-Dev/e3e56868da48ab516b3538609ec2eb9b)",
              "SonarService:OcpApimSubscriptionKey": "@Microsoft.KeyVault(SecretUri=https://example.vault.azure.net/secrets/Some-Subscription-Key/e3e56868da48ab516b3538609ec2eb9b)",
              "@Microsoft.KeyVault(VaultName=Example;SecretName=Subscription-Key;SecretVersion=e3e56868da48ab516b3538609ec2eb9b)"
          containsSecret: false
        - text: |
            # Noncompliant code example
            props.set("subscription_key", "efbb1a98f026d061464af685cd16dcd3")
          containsSecret: true
          match: efbb1a98f026d061464af685cd16dcd3
        - text: |
            # Compliant solution
            props.set("subscription_key", System.getenv("SUBSCRIPTION_KEY"))
          containsSecret: false


    - id: azure-subscription-keys-context-url-before
      rspecKey: S6684
      metadata:
        name: Azure subscription keys should not be leaked
      detection:
        pre:
          include:
            content:
              - "microsoft.com"
        matching:
          # Matches a 32 chars hexadecimal string located at most 3 lines under a microsoft API URL.
          pattern: "(?is)api\\.[a-z0-9.]*microsoft.com(?:[^\\r\\n]*+\\r?\\n){1,3}?(?:[^\\r\\n]*)(?:secret|key).{1,15}\\b([a-f0-9]{32})\\b"
        post:
          statisticalFilter:
            threshold: 3.0
      examples:
        - text: |
            const string OcrEndPointV1 = "https://eastasia.api.cognitive.microsoft.com/vision/v2.0/ocr?detectOrientation=true&language=";
            const string VisionKey2 = "efbb1a98f026d061464af685cd16dcd3";
          containsSecret: true
          match: efbb1a98f026d061464af685cd16dcd3

    - id: azure-subscription-keys-context-url-after
      rspecKey: S6684
      metadata:
        name: Azure subscription keys should not be leaked
      detection:
        pre:
          include:
            content:
              - "microsoft.com"
        matching:
          # Matches a 32 chars hexadecimal string located at most 3 lines above a microsoft API URL.
          pattern: "(?is)(?:secret|key).{1,15}\\b([a-f0-9]{32})\\b(?:[^\\r\\n]*+\\r?\n){1,3}?(?:[^\\r\\n]*)api\\.[a-z0-9.]*microsoft.com"
        post:
          statisticalFilter:
            threshold: 3.0
      examples:
        - text: |
            const string VisionKey2 = "efbb1a98f026d061464af685cd16dcd3";
            const string OcrEndPointV2 = "https://eastasia.api.cognitive.microsoft.com/vision/v2.0/ocr?detectOrientation=true&language=";
          containsSecret: true
          match: efbb1a98f026d061464af685cd16dcd3
